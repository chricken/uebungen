{"root":[{"name":"Basics","parts":[{"name":"Variablen","fragen":[{"frage":"Lege eine Variable mit einem Wert Deiner Wahl an.\nLass diese Variable in der Konsole ausgeben.","antworten":["let x = 42;\nconsole.log(x);"]},{"frage":"Wie oben, aber lass das Doppelte der Variablen ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":["let x = 42;\nx = x * 2;\nconsole.log(x);","let x = 42;\nx *= 2;\nconsole.log(x);","let x = 42;\nconsole.log(x*2);"]},{"frage":"Lege eine Variable mit einem Wert Deiner Wahl an.\nLass den Sinus dieser Variable in der Konsole ausgeben.\nHinweis: Die Methode Math.sin() ermittelt den Sinus eines Winkels.\nHinweis: Beachte, dass die Sinus-Funktion Bogenmaß erwartet.","typ":"praxis","schwierigkeit":0,"antworten":["let x = 42;\nconsole.log( Math.sin( x / 180 * Math.PI) );","// Wer schon mit Funktionen umgehen kann, wird diesen Ansatz besser finden\n\nconst bm = winkel => winkel / 180 * Math.PI;\nlet x = 42;\nconsole.log(Math.sin(bm(x)));"]},{"frage":"Lass eine zufällige Zahl in einem Alert-Fenster ausgeben","typ":"praxis","schwierigkeit":0,"antworten":["let x = Math.floor(Math.random() * 100);\nalert(x);","// Wer schon mit Funktionen umgehen kann, wird diesen Ansatz besser finden\n\nconst zufallErzeugen = (min=0, max=100) => Math.floor(Math.random() * (max - min + 1) + min);\nalert( zufallErzeugen() ); "]},{"frage":"Lege eine Variable mit einem Wert Deiner Wahl an.\nGib den Inhalt der Variable aus.\nGib dann das doppelte der Variablen aus.\nGib dann das dreifache der Variablen aus.\nGib dann das vierfache der Variablen aus.","typ":"praxis","schwierigkeit":0,"antworten":["let x = 12;\nconsole.log(x);\nconsole.log(x * 2);\nconsole.log(x * 3);\nconsole.log(x * 4);","let x = 12;\nconsole.log(x);\n\nx *= 2;\nconsole.log(x);\n\nx *= 2;\nconsole.log(x);\n        \nx *= 2;\nconsole.log(x);"]},{"frage":"Lege zwei Variablen Deiner Wahl an.\nGib das Produkt der beiden Variablen aus.\nGib die Summe der beiden Variablen aus.\nGib den Quotienten der beiden Variablen aus.\nGib das Differenz der beiden Variablen aus.\nGib das Modulo der beiden Variablen aus.","typ":"praxis","schwierigkeit":0,"antworten":["let x = 12;\nlet y = 23;\n\nconsole.log(x * y);\nconsole.log(x + y);\nconsole.log(x / y);\nconsole.log(x - y);","let x = 12;\nlet y = 23;\n\nlet produkt = x * y;\nconsole.log(produkt);\n\nlet summe = x + y;\nconsole.log(summe);\n\nlet quotient = x / y;\nconsole.log(quotient);\n\nlet differenz = x - y;\nconsole.log(differenz);"]},{"frage":"Lege zwei Variablen Deiner Wahl an. Angenommen, diese Werte sind die Katheten eines rechtwinkligen Dreiecks.\nErrechne mittels das Satzes des Pythagoras die Länge der Hypothenuse.","typ":"praxis","schwierigkeit":0,"antworten":["let ak = 3;\nlet gk = 4;\n\nlet hyp = Math.sqrt((ak**2) + (gk**2));\n\nconsole.log(hyp);   // -> 5"]}]},{"name":"Datentypen","fragen":[{"frage":"Lass den Datentypen einer Variablen ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":["let x = 42;\nconsole.log( typeof x );  // -> number"]},{"frage":"Lege eine Variable mit einer beliebigen Zahl an.\nWandle diese Zahl in einen String um und gib diesen String in der Konsole aus.","typ":"praxis","schwierigkeit":0,"antworten":["let x = 123;\nlet s = String(x);\nconsole.log(s);","let x = 123;\nlet s = '' + x;\nconsole.log(s);"]},{"frage":"Lege eine Variable mit einem beliebigen String an.\nWandle diesen String in eine Number um","typ":"praxis","schwierigkeit":0,"antworten":["let s = '123';\nlet x = Number(s);","let s = '123';\nlet x = s * 1;"]}]},{"name":"Kommentare","fragen":[{"frage":"Nimm die Programme von oben und trage Kommentare ein.","typ":"praxis","schwierigkeit":0,"antworten":["// Variable anlegen\nlet x = 123;\n\n// Umwandlung zu String\ns = '' + x;\n\n// Ausgabe\nconsole.log(typeof s);"]},{"frage":"Benutze einzeilige Kommentare, um Programmteile zeitweise zu deaktivieren.\nBenutze mehrzeilige Kommentare, um Codeblöcke zu beschreiben.","typ":"praxis","schwierigkeit":0,"antworten":["/*\nDies ist ein nicht so kompliziertes Programm.\nAutor: Christian Heisch\nVersion: 1.0.1\nDate: 15.03.2021\n*/\n\nlet x = 123;\n// s = '' + x;\nconsole.log(typeof s);"]}]}]},{"name":"Strings","parts":[{"name":"Einfache Manipulationen","fragen":[{"frage":"Lege einen String an und fülle diesen mit einem Text Deiner Wahl.\nDer Text soll aus mindestens 200 Zeichen bestehen.\nGib den String in der Konsole aus.","typ":"praxis","schwierigkeit":0,"antworten":["// Der Text stammt von blindtextgenerator.de\nlet s = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.';\nconsole.log(s);","// Ein bisschen spannender mit automatischer Erzeugung des Strings.\nlet zeichen = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789        '.split('');\nlet s = '';\nfor ( let i = 0; i < 200; i++){\n    let z = Math.floor(Math.random()*zeichen.length);\n    s+= zeichen[z];\n}\nconsole.log(s);"]},{"frage":"Wie oben, aber gib nur die ersten 50 Zeichen aus.","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.';\nconsole.log(s.substr(0,50));"]},{"frage":"Wie oben, aber gib die mittleren 50 Zeichen aus.","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.';\nlet start = Math.floor(s.length/2)-25;\nconsole.log(s.substr(start,50));"]},{"frage":"Suche das erste Vorkommen des Wortes \"und\" und ersetze es durch das Wort \"oder\".","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.replace('und', 'oder');\nconsole.log(s);"]},{"frage":"Ersetze alle \"und\" durch \"oder\"","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.replace(/und/g, 'oder');\nconsole.log(s);","let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\nwhile (s.includes('und')) {\n    s = s.replace('und', 'oder');\n}\nconsole.log(s);","let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.split('und').join('oder');\nconsole.log(s);"]},{"frage":"Der Benutzer soll selbst angeben können, was gesucht und wodurch es ersetzt werden soll","typ":"praxis","schwierigkeit":0,"antworten":["let myString = 'Mond und Erde und Mars und Venus gehen rund um die Sonne herum';\n\nlet find = prompt('Wonach soll gesucht werden?', 'und');\nlet paste = prompt(`Wodurch soll \"${find}\" ersetzt werden?`, 'oder');\nmyString = myString.replaceAll(find, paste);\n\nconsole.log(myString);"]},{"frage":"Es sollen nur die \"und\" ersetzt werden, die als ganzes Wort vorkommen.\nBegriffe wie \"Hund\", \"Schlund\" oder \"under\" sollen unverändert bleiben.","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Sonne und Mond und, vielleicht Hund Mund. Sterne und Mars sind schön und weit weg.';\nlet find = 'und', paste = 'oder';\ns = s.replaceAll(` ${find} `, ` ${paste} `);\ns = s.replaceAll(` ${find},`, ` ${paste},`);\ns = s.replaceAll(` ${find}.`, ` ${paste}.`);\n\nconsole.log(s);"]},{"frage":"Es sollen auch die Vorkommen ersetzt werden, die mit Großbuchstaben beginnen.","typ":"praxis","schwierigkeit":0,"antworten":["let myString = 'Mond und Erde. Und Mars und, Venus gehen rund um die Sonne herum';\n\nlet find = prompt('Wonach soll gesucht werden?', 'und');\nlet paste = prompt(`Wodurch soll \"${find}\" ersetzt werden?`, 'oder');\n\n// Zulässigen Kombinationen mit Leerzeichen und Satzzeichen suchen und ersetzen\nmyString = myString.replaceAll(` ${find} `, ` ${paste} `);\nmyString = myString.replaceAll(` ${find},`, ` ${paste},`);\nmyString = myString.replaceAll(` ${find}.`, ` ${paste}.`);\n\n// Ersten Buchstaben groß schreiben, den Rest so lassen\nfind = find[0].toUpperCase() + find.substr(1);\npaste = paste[0].toUpperCase() + paste.substr(1);\n\n// Mit Großbuchstaben suchen und ersetzen\nmyString = myString.replaceAll(` ${find} `, ` ${paste} `);\nmyString = myString.replaceAll(` ${find},`, ` ${paste},`);\nmyString = myString.replaceAll(` ${find}.`, ` ${paste}.`);\n\nconsole.log(myString);"]},{"frage":"Lass nur das zweite Vorkommen von \"und\" ersetzen.","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Sonne und Mond und Sterne und Mars sind schön und weit weg.';\nlet find = 'und', paste = 'oder';\nlet all = s.split(find);\n\ns = `${all[0]}${find}${all[1]}${paste}`;\nall.splice(0,2);\ns += all.join(find);\n\nconsole.log(s);\n"]}]},{"name":"Palindrom","fragen":[{"frage":"Erzeuge einen String Deiner Wahl.\nDreh den gesamten String um und lass den umgedrehten String ausgeben. ","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.split('').reverse().join('');\nconsole.log(s);"]},{"frage":"Lass den Benutzer einen String eingeben und überprüfe, ob dieser String vorwärts wie rückwärts gelesen derselbe ist (Sog. Palindrome).\nBeachte auch, dass das erste Zeichen häufig groß geschrieben wird.\nBeispiele für Palindrom: Regallager, Rentner, Drehherd, Kajak, Reittier","typ":"praxis","schwierigkeit":0,"antworten":["let s = prompt('Text?');\nlet gedreht = s.split('').reverse().join('').toLowerCase();\nconsole.log( gedreht == s.toLowerCase() );"]}]}]},{"name":"Booleans / if","parts":[{"name":"Booleans","fragen":[{"frage":"Lege zwei Variablen an und speichere darin zufällige Zahlen.\nGib in der Konsole aus, ob Variable1 kleiner ist als Variable2.","typ":"praxis","schwierigkeit":0,"antworten":["let zahl1 = Math.floor(Math.random() * 10);\nlet zahl2 = Math.floor(Math.random() * 10);\n\nif (zahl1 == zahl2) {\n console.log(`Beide Zahlen sind identisch: ${zahl1}`);\n} else if (zahl1 < zahl2) {\n console.log(`Zahl 1 ist kleiner: ${zahl1}, ${zahl2}`);\n} else {\n console.log(`Zahl 2 ist kleiner: ${zahl1}, ${zahl2}`);\n}","let zahl1 = Math.floor(Math.random() * 10);\nlet zahl2 = Math.floor(Math.random() * 10);\nlet kleiner;\n\nif (zahl1 == zahl2) {\n kleiner = 0;\n} else if (zahl1 < zahl2) {\n kleiner = 1\n} else {\n kleiner = 2\n}\nconsole.log(`Zahl ${kleiner} ist kleiner: ${zahl1}, ${zahl2}`);"]}]},{"name":"Eingabe verarbeiten","fragen":[{"frage":"Lass den Benutzer einen Text eingeben.\nWenn keine Eingabe gemacht wurde, soll in der Konsole eine entsprechende Meldung erscheinen.","typ":"praxis","schwierigkeit":0,"antworten":["let eingabe = prompt('Ihre Eingabe');\n\nif ( eingabe == '' ){\n console.log('Es wurde keine Eingabe gemacht.');                \n}"]},{"frage":"Wenn die Abbrechen-Taste gedrückt wurde, soll das mit einer entsprechenden Meldung ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":["let eingabe = prompt('Ihre Eingabe');\n\nif (eingabe == '') {\n console.log('Es wurde keine Eingabe gemacht.');\n} else if (eingabe==null){\n console.log('Es wurde Abbrechen geklickt.');\n}"]},{"frage":"Wenn die Abbrechen-Taste gedrückt wurde, soll zusätzlich eine Abfrage kommen, ob die Eingabe wirklich beendet werden soll.","typ":"praxis","schwierigkeit":0,"antworten":["let input = prompt('Ihre Eingabe');\n\nif (input == null) {\n input = prompt('Soll wirklich abgebrochen werden?')\n}\n\nif (input) {\n console.log(input);\n} else if (input == null) {\n console.log('Abgebrochen');\n} else {\n console.log('Keine Eingabe');\n}"]},{"frage":"Wenn die OK-Taste gedrückt wurde, soll zusätzlich zu oberem geprüft werden, ob mehr als 10 Zeichen eingegeben wurden. Falls ja, soll der Text in der Konsole ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":["let promptText = 'Ihre Eingabe';\nlet eingabe = prompt(promptText);\n\nif (eingabe == '') {\n console.log('Es wurde keine Eingabe gemacht.');\n} else if (eingabe == null) {\n if (confirm('Wirklich abbrechen?')) {\n  console.log('Es wurde Abbrechen geklickt.');\n } else {\n  eingabe = prompt(promptText)\n }\n}\n\nif (eingabe.length > 10) {\n console.log(eingabe);\n}"]}]},{"name":"Strings vergleichen","fragen":[{"frage":"Lege zwei Variablen an und speichere je einen Vornamen Deiner Wahl darin.\nLass ausgeben, welcher Name im Alfabet zuerst kommt.","typ":"praxis","schwierigkeit":0,"antworten":["let vname1 = 'Anton';\nlet vname2 = 'Valerie';\n\nif (vname1 < vname2) {\n console.log(`Der erste Name steht vorn im Alfabet`);\n} else {\n console.log(`Der zweite Name steht vorn im Alfabet`);\n}"]},{"frage":"Wie oben, aber der Benutzer soll die Namen selbst eingeben können.\nLass den Namen ausgeben, der zuerst im Alfabet kommt.","typ":"praxis","schwierigkeit":0,"antworten":["let vname1 = prompt('Erster Name');\nlet vname2 = prompt('Zweiter Name');\n\nif (vname1 < vname2) {\n console.log(`${vname1} steht vor ${vname2} im Alfabet`);\n} else {\n console.log(`${vname1} steht hinter ${vname2} im Alfabet`);\n}"]}]},{"name":"Karten kaufen","fragen":[{"frage":"Schreibe ein Programm, das nach einer Eingabe des Geburtsjahres ausgibt, ob die Person volljährig ist oder nicht.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Schleifen","parts":[{"name":"Iterationen","fragen":[{"frage":"Erzeuge einen String Deiner Wahl.\nLass jedes zweite Zeichen (auch Leerzeichen) in einer eigenen Konsolenausgabe oder einem DOM-Element ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Hallo Welt';\n\nfor ( let i = 1; i < s.length; i+=2){\n    console.log ( s[i] );\n}","let s = 'Hallo Welt';\n\nfor ( let i = 1; i < s.length; i+=2){\n    let d = document.createElement('span');\n    d.innerHTML = s[i];\n    document.body.append(d);\n}","let s = 'Hallo Welt';\n\nlet a = s.split('').filter((el,i)=>i%2).forEach( el => {\n    let d = document.createElement('span');\n    d.innerHTML = el;\n    document.body.append(d);\n})"]},{"frage":"Erzeuge einen String Deiner Wahl.\nJedes zweite Zeichen soll in einer gemeinsamen Variable gespeichert und ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Hallo Welt';\nlet ausgabe = '';\nfor ( let i = 1; i < s.length; i+=2){\n    ausgabe += s[i];\n}\nconsole.log(ausgabe);","let s = 'Hallo Welt';\n\nconsole.log( s.split('').filter((el, i) => i % 2).join(''));"]}]},{"name":"Berechnungen","fragen":[{"frage":"Erzeuge eine Schleife, die alle Zahlen von 1 bis 100 addiert und das Ergebnis ausgibt.","typ":"praxis","schwierigkeit":0,"antworten":["let sum = 0;\nfor ( let i = 1; i <= 100; i++){\n    sum += i;\n}\nconsole.log(sum);","let zahlen = [...new Array(100)].map((el, index) => index + 1);\nconsole.log(zahlen.reduce((sum,el) => sum+el, 0));"]},{"frage":"Lege eine Schleife an, welche für eine gegebene Geldsumme, Verzinsung und Laufzeit die Zinsen und Zinseszinsen berechnet.","typ":"praxis","schwierigkeit":0,"antworten":["let geld = 100;\nlet laufzeit = 5;\nlet zinsen = 3;\n\nfor ( let i = 0; i < laufzeit; i++){\n    geld += geld/100*zinsen;\n}\ngeld = Math.round( geld * 100 ) / 100;\nconsole.log(geld);"]},{"frage":"Der Legende nach hat der Erfinder des Schachspieles von seinem Auftraggeber verlangt, für das erste Feld auf dem Schachbrett einen Reiskorn zu erhalten und für jedes weitere Feld das doppelte des vorigen Wertes. \nLass durch ein Programm ermitteln, wieviele Reiskörner der Bauer am Ende erhalten würde.\nRechne auch aus, wieviele kg, Tonnen und Welternten an Reis der Bauer erhalten würde, wenn 40 Reiskörner 1g wiegen.","typ":"praxis","schwierigkeit":0,"antworten":["let numFields = 8*8;\nlet grains = 0;\nlet addThis = 1;\n\nfor ( let i = 1; i <= numFields; i++){\n grains += addThis;\n addThis *= 2;\n}\n        \nconsole.log(grains);","let numFields = 8 * 8;\nlet grains = 0;\nlet addThis = 1;\n\nfor (let i = 1; i <= numFields; i++) {\n grains += addThis;\n addThis *= 2;\n}\n\nlet weight = Math.round(grains / 40 / 1000);\nconsole.log(weight + ' kg');\n        \nweight = Math.round(weight / 1000);\nconsole.log(weight + ' to');\n\nweight = weight / 6e8; // 6e8 entspricht 600.000.000\nconsole.log(weight + ' Welternte');"]},{"frage":"Der Benutzer soll eingeben können, wie viele Felder das Spielfeld haben soll.","typ":"praxis","schwierigkeit":0,"antworten":["let numFields = +prompt('Breite') * +prompt('Höhe');\nlet grains = 0;\nlet addThis = 1;\n\nfor (let i = 1; i <= numFields; i++) {\n grains += addThis;\n addThis *= 2;\n}\n        \nlet weight = Math.round(grains / 40 );\nconsole.log(weight + 'g');\n\nweight = Math.round(weight/ 1000);\nconsole.log(weight + ' kg');\n        \nweight = Math.round(weight / 1000);\nconsole.log(weight + ' to');\n\nweight = weight / 6e8; // 6e8 entspricht 600.000.000\nconsole.log(weight + ' Welternte');"]}]},{"name":"Zufall","fragen":[{"frage":"Erzeuge eine Schleife, die zählt, wieviele von 100 zufälligen Zahlen zwischen 0 und 1 größer sind als 0.75.","typ":"praxis","schwierigkeit":0,"antworten":["let counter = 0; \nfor ( let i = 0; i < 100; i++){\n    if ( Math.random() > .75) counter++;\n}\nconsole.log(counter);","console.log([...new Array(100)].map(()=>Math.random()).filter(el => el > .75).length);"]}]},{"name":"Zahlenspiel","fragen":[{"frage":"Der Computer erzeugt eine ganze Zahl zwischen 1 und 1000.\nDer Benutzer muss raten, um welche Zahl es sich handelt.\nBei jedem Rateversuch meldet der Computer, ob die gesuchte Zahl größer oder kleiner als die eingegebene Zahl ist.\nDann kann der Benutzer es weiter versuchen, bis er die richtige Zahl gefunden hat.","typ":"praxis","schwierigkeit":0,"antworten":["let max = 1000, min = 1;\nlet zufall = Math.floor(Math.random() * (max - min + 1) + min);\n let geraten = prompt('Welches ist die Zahl?');\n while (zufall != geraten) {\n  if (geraten < zufall)\n   geraten = prompt('Das war zu klein. \\nWelches ist die Zahl?');\n  else\n   geraten = prompt('Das war zu groß. \\nWelches ist die Zahl?');\n }\nalert(`${geraten} ist richtig`);"]},{"frage":"Schreibe ein Programm, das das Zahlenspiel selbstständig löst und mitzählt, wieviele Schritte es benötigt hat.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Rechnereien","fragen":[{"frage":"Der Benutzer soll eine Zahl seiner Wahl eingeben können.\nDas Programm soll dann aus dieser Zahl die Quersumme bilden.","typ":"praxis","schwierigkeit":0,"antworten":["let eingabe = prompt('Eingabe', 1234);\nlet quersumme = 0;\nfor (let i = 0; i < eingabe.length; i++){\n quersumme += Number(eingabe[i]);\n}\nconsole.log(quersumme);","let eingabe = prompt('Eingabe', 1234);\nlet quersumme = eingabe.split('').reduce((sum, el) => sum + Number(el), 0);\nconsole.log(quersumme);"]}]}]},{"name":"Funktionen / Zeitsteuerung","parts":[{"name":"Einfache Aufrufe","fragen":[{"frage":"Lege eine tolle Funktion an, welche einen Text ausgibt.\nRuf diese Funktion 5mal auf, so dass der Text fünf mal erscheint.","typ":"praxis","schwierigkeit":0,"antworten":["const ausgabe = () => console.log('Hallo Welt');\n\nfor (let i = 0; i < 5; i++) ausgabe();","const ausgabe = () => console.log('Hallo Welt');\n\nlet anzahl = 5;\nwhile (anzahl--) ausgabe();"]},{"frage":"Lege eine Funktion an, welche einen Text ausgibt, der als Parameter übergeben wird.\nRuf diese Funktion 5mal auf, so dass 5mal der Text erscheint, der jeweils übergeben wurde.","typ":"praxis","schwierigkeit":0,"antworten":["const ausgabe = text => console.log(text);\n\nausgabe('abc');\nausgabe('def');\nausgabe('ghi');\nausgabe('jkl');\nausgabe('mno');","const ausgabe = text => console.log(text);\n\n['abc','def','ghi','jkl','mno'].forEach( ausgabe );"]},{"frage":"Lege eine Funktion an.\nRuf diese Funktion 5mal auf.\nBei jedem Aufruf der Funktion soll ausgegeben werden, wie oft die Funktion schon aufgerufen wurde.","typ":"praxis","schwierigkeit":0,"antworten":["let counter = 0;\nconst ausgabe = () => {\n    counter++;\n    console.log(counter);\n} \n\nfor(let i = 0; i<5;i++) ausgabe();","let counter = 0;\nconst ausgabe = () => {\n    console.log(++counter);\n}\n\nfor (let i = 0; i < 5; i++) ausgabe();","const ausgabe = counter => {\n    console.log(++counter);\n    if (counter < 5) ausgabe(counter);\n}\n\nausgabe(0);"]},{"frage":"Der Benutzer soll zwei Eingaben machen.\nDiese werden an eine Funktion übergeben, die dann das Produkt der beiden Zahlen zurückgibt.","typ":"praxis","schwierigkeit":0,"antworten":["const mult = (a, b) => {\n    console.log(a * b);\n}\n \nmult(prompt('wert 1'), prompt('wert 2'));"]},{"frage":"Erzeuge eine Funktion, die für einen übergebenen Parameter überprüft, ob dieser durch 3 teilbar ist.","typ":"praxis","schwierigkeit":0,"antworten":["const ausgabe = wert => {\n    if ( wert % 3 == 0 ) console.log( `${wert} ist durch 3 teilbar` );\n    else console.log( `${wert} ist nicht durch 3 teilbar` );\n}\n\nausgabe(12);\nausgabe(13);","const ausgabe = wert => {\n    console.log ( \n        !(wert % 3)\n        ? `${wert} ist durch 3 teilbar`\n        : `${wert} ist nicht durch 3 teilbar`\n    );\n}\n\nausgabe(12);\nausgabe(13);"]},{"frage":"Erzeuge eine Funktion, an die zwei Parameter übergeben werden.\nDann soll überprüft werden, ob der erste Parameter durch den zweiten Parameter teilbar ist.","typ":"praxis","schwierigkeit":0,"antworten":["const ausgabe = (wert, teiler) => {\n    if ( wert % teiler == 0 ) console.log( `${wert} ist durch ${teiler} teilbar` );\n    else console.log( `${wert} ist nicht durch ${teiler} teilbar` );\n}\nausgabe(12,4);\nausgabe(13,3);"]}]},{"name":"Umrechnungen","fragen":[{"frage":"Lege eine Funktion an, welche einen Parameter annimmt. Der Parameter ist eine Temperatur in °C. Diese soll zu Kelvin umgerechnet werden.","typ":"praxis","schwierigkeit":0,"antworten":["const cToK = temp => {\n console.log(temp + 273.15);\n}\ncToK(100);","const cToK = temp => console.log(temp + 273.15);\ncToK(100);"]},{"frage":"Lege eine Funktion an, welche einen Parameter annimmt. Der Parameter ist Winkel. Dieser soll zu Bogenmaß umgerechnet werden.\nDas Ergebnis soll als Rückgabewert an den Aufruf zurückgeliefert werden","typ":"praxis","schwierigkeit":0,"antworten":["const bm = winkel => {\n return winkel /180 * Math.PI;\n}\nbm(45);","const bm = winkel => winkel /180 * Math.PI;\nbm(45);"]}]},{"name":"Zahlenreihen","fragen":[{"frage":"Lege eine Funktion an, die einen übergebenen Parameter überprüft, ob es sich um eine Primzahl handelt.\nSonderfälle: 0 ist keine Primzahl, 1 ist keine Primzahl.","typ":"praxis","schwierigkeit":0,"antworten":[" const isPrim = wert => {    \n    if ( wert == 0 || wert == 1) return false;\n    for ( let i = 2; (i*i) <= wert; i++ ){\n        if ( wert % i == 0 ) return false;\n    }\n    return true;\n}\nconsole.log( isPrim(13) );"]},{"frage":"Lege eine Funktion an, die zwei Parameter annimmt.\nDie Funktion soll jede Primzahl zwischen den beiden Werten in der Konsole ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":["const checkIfPrime = num => {\n for (let i = 2; i <= Math.sqrt(num); i++) {\n  if (num % i == 0) return false;\n }\n return true;\n}\n\nconst checkRangeIfPrime = (min, max) => {\n for (let i = min; i <= max; i++) {\n  if(checkIfPrime(i)) console.log(i);\n }\n}\n\ncheckRangeIfPrime(\n prompt('Kleinste Zahl'),\n prompt('Größte Zahl?')\n);"]},{"frage":"Lege eine Funktion an, welche die Fibonacci-Reihe (1,1,2,3,5,8,13,21,...) zurückgibt.\nDie Länge der Reihe soll per Parameter übergeben werden.","typ":"praxis","schwierigkeit":0,"antworten":["let makeFibo = laenge => {\n    let f1 = 1, f2 = 1;\n    let reihe = [];\n    for ( let i = 0; i < laenge; i++){\n        reihe.push(f1);\n        [f1,f2]=[f2,f1 + f2];\n    }\n    return reihe;\n}\nconsole.log( makeFibo(20) );"]},{"frage":"Lege eine Funktion an, die überprüft, ob eine übergebene Zahl Teil der Fibonacci-Reihe ist.","typ":"praxis","schwierigkeit":0,"antworten":["let isInFibo = wert => {\n    let f1 = 1, f2 = 1;\n    while (f1 <= wert) {\n        if (f1 == wert) return true;\n        [f1, f2] = [f2, f1 + f2];\n    }\n    return false;\n}\nconsole.log(isInFibo(10946));"]}]},{"name":"Zufälle","fragen":[{"frage":"Lege eine Funktion an, welche eine zufällige, ganze Zahl erzeugt. Die Funktion soll zwei Parameter annehmen, welche den maximalen und den minimalen Wert darstellen.","typ":"praxis","schwierigkeit":0,"antworten":["const zufallErzeugen = (min=1,max=6) => Math.floor( Math.random() * (max-min+1) + min);\n\nconsole.log( zufallErzeugen(10,100));\nconsole.log( zufallErzeugen());"]},{"frage":"Funktion wie oben, aber ein dritter Parameter soll bestimmen, wieviele Nachkommastellen die zufällige Zahl haben soll.","typ":"praxis","schwierigkeit":0,"antworten":["const zufallErzeugen = (min = 1, max = 6, dez = 0) => {\n    dez = 10 ** dez;\n    let z = Math.random();\n    z *= (max - min + (1 / dez));\n    z += min;\n    z = Math.floor(z * dez) / dez;\n    return z;\n}\n\nconsole.log(zufallErzeugen(10, 100, 2));\nconsole.log(zufallErzeugen());"]},{"frage":"Lege eine Funktion an, welche den String für eine zufällige Farbe erzeugt.","typ":"praxis","schwierigkeit":0,"antworten":["const zufallErzeugen = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\nconst zufallFarbe = () => `hsl(${zufallErzeugen(0,360)},100%,50%)`;\nconsole.log(  zufallFarbe() );","let zeichen = '0123456789abcdef'.split('');\nconst zufallErzeugen = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\nconst zufallFarbe = () => {\n    let farbe = '#';\n    for ( let i = 0; i < 6; i++){\n        farbe += zeichen[zufallErzeugen(0,zeichen.length)];\n    }\n    return farbe;\n}\nconsole.log(  zufallFarbe() );"]}]},{"name":"Zeitsteuerung","fragen":[{"frage":"Der Benutzer soll eine Zahl eingeben können. \nDie Webseite wartet dann die angegebenen Anzahl an Sekunden und macht eine Ausgabe.","typ":"praxis","schwierigkeit":0,"antworten":["let delay = prompt('Wartezeit');\nsetTimeout(() => {\n    alert('Ich bin die Ausgabe!');\n}, delay*1000);"]},{"frage":"Der Benutzer soll eine Zahl x eingeben.\nDie Webseite soll dann alle x Sekunden ein neues Inhaltselement erzeugen und in die Seite einhängen.","typ":"praxis","schwierigkeit":0,"antworten":["let delay = prompt('Delay:');\nsetInterval(() => {\n    let neu = document.createElement('div');\n    neu.innerHTML = delay;\n    document.body.append(neu);\n}, delay*1000);"]}]}]},{"name":"Arrays","parts":[{"name":"Einfache Manipulation","fragen":[{"frage":"Lege ein Array mit 10 Stellen an und fülle jede Speicherstelle mit einer zufälligen ganzen Zahl zwischen 0 und 100. \nLass den gesamten Inhalt ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":["const zufall = (min=0, max=100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = [], anzahl = 10;\nfor (let i = 0; i < anzahl; i++) {\n    a.push(zufall())\n}\nconsole.log( a ); ","const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) {\n    a[i] = zufall();\n}\nconsole.log(a);"]},{"frage":"Lass den Durchschnitt aller Zahlen in diesem Array ausgeben. ","typ":"praxis","schwierigkeit":0,"antworten":["let durchschnitt = a.reduce((a,b) => a+b) / a.length;\nconsole.log (durchschnitt); "]},{"frage":"Lass jede Speicherstelle des Array einzeln mit seinem Index ausgeben","typ":"praxis","schwierigkeit":0,"antworten":["const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\n\nlet a = [];\nfor (let i = 0; i < 100; i++) a.push(zufall());\n\na.forEach((el, index) => console.log(index, el));"]},{"frage":"Lass nur die Speicherstellen des Array ausgeben, die kleiner sind als 20. ","typ":"praxis","schwierigkeit":0,"antworten":["const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\n\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n\na.forEach( el => {\n    if( el < 20 ) console.log( el );\n})\nconsole.log( a.join(', ') );","const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n\nconsole.log( a.filter( el => el < 20 ).join(', ') );"]},{"frage":"Ermittle, wieviele der Elemente kleiner sind als 20. ","typ":"praxis","schwierigkeit":0,"antworten":["const threshold = 20;\nconst zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n\nconsole.log(a.filter(el => el < threshold).join(', '));\nconsole.log(a.filter(el => el < threshold).length);","const threshold = 20;\n\nconst zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n       \nconsole.log(a);\n\nconsole.log(a.reduce((anzahl, el) => {\n if (el < threshold) return anzahl + 1\n else return anzahl\n}, 0));"]},{"frage":"Statt der 20 aus der vorigen Aufgabe soll über einen &lt;input type='range'&gt; den Schwellwert festgelegt werden.","typ":"praxis","schwierigkeit":0,"antworten":["// Keine Musterlösung"]}]},{"name":"Erweitere Manipulation","fragen":[{"frage":"Erzeuge ein Array, welches die Zahlen von 0 bis 100 enthält.\nLege eine Funktion an, die dieses Array durchmischt.","typ":"praxis","schwierigkeit":0,"antworten":["let a = [];\nfor (let i = 0; i < 100; i++) a.push(i);\n\n\nfor (let i = 0; i < a.length; i++) {\n    let z = ~~(Math.random() * a.length);\n    [a[i], a[z]] = [a[z], a[i]];\n}\nconsole.log(a.join(', '));"]},{"frage":"Erzeuge ein Array, das die Zahlen von 1 bis 5 enthält.\nTausche dann die zweite und die vierte Speicherstelle gegeneinander aus und lass das Array ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":["let a = [1, 2, 3, 4, 5];\nlet temp = a[1];\na[1] = a[3];\na[3] = temp;\nconsole.log(a);","let a = [1, 2, 3, 4, 5];\na = [a[0], a[3], a[2], a[1], a[4]]\nconsole.log(a); ","let a = [1, 2, 3, 4, 5];\n[a[1], a[3]] = [a[3], a[1]];\nconsole.log(a);"]},{"frage":"Lass den Benutzer einen Text eingeben und ermittle dann, wie viele Leerzeichen in diesem Text vorkommen.","typ":"praxis","schwierigkeit":0,"antworten":["let s = prompt('Eingabe:');\nlet count = 0;\nfor (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ') count++;\n}\nconsole.log(count);","let s = prompt('Eingabe:');\nlet count = s.split('').reduce((count, char) => {\n    if (char == ' ') count++;\n    return count;\n}, 0)\nconsole.log(count);","let s = prompt('Eingabe:');\nlet count = s.split(' ').length - 1\nconsole.log(count); "]}]},{"name":"Lotto","fragen":[{"frage":"Erzeuge ein Array für Lottozahlen.\nD.h. Speichere in diesem Array sechs Zufallszahlen von 1 bis 49 und stelle dabei sicher, dass keine der Zahlen doppelt vorkommt.","typ":"praxis","schwierigkeit":0,"antworten":["let a = [];\nconst zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nwhile (a.length < 6) {\n    let z = zufall(1, 49);\n    if (!a.includes(z)) a.push(z);\n}\na.sort((a, b) => a - b);\nconsole.log(a);","const zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nconst makeLotto = () => {\n    let stapel = [...new Array(49)].map((el, i) => i + 1);\n    let lotto = [];\n    for (let i = 0; i < 6; i++) {\n        let z = zufall(0,stapel.length-1);\n        lotto.push(stapel.splice(z,1)[0]);\n    }\n    lotto.sort((a, b) => a - b);\n    return(lotto);\n\n}\nconsole.log ( makeLotto() );","const zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nconst makeLotto = () => {\n    let stapel = [...new Array(49)].map((el, i) => i + 1);\n    let lotto = [...new Array(6)].map(() => stapel.splice(zufall(0, stapel.length - 1), 1)[0]);\n    lotto.sort((a, b) => a - b);\n    return (lotto);\n}\nconsole.log(makeLotto());","const zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nlet lotto = new Set();\nwhile (lotto.length < 6) {\n    lotto.add(zufall(0, 49));\n}\nlotto = [...lotto];\nlotto.sort((a, b) => a - b);\nconsole.log(lotto);"]}]},{"name":"DOM manipulieren","fragen":[{"frage":"Kopiere die HTML-Code aus der Musterlösung mithilfe des Copy-Buttons für die folgenden Teilaufgaben.","typ":"praxis","schwierigkeit":0,"antworten":["<div id=\"el_strings\">\n        <p> Zwei flinke Boxer jagen die quirlige Eva und ihren Mops durch Sylt. </p>\n        <p> Franz jagt im komplett verwahrlosten Taxi quer durch Bayern. </p>\n        <p> Zwölf Boxkämpfer jagen Viktor quer über den großen Sylter Deich. </p>\n        <p> Vogel Quax zwickt Johnys Pferd Bim. </p>\n        <p> Sylvia wagt quick den Jux bei Pforzheim. </p>\n        <p> Polyfon zwitschernd aßen Mäxchens Vögel Rüben, Joghurt und Quark. </p>\n        <p> \"Fix, Schwyz! \" quäkt Jürgen blöd vom Paß. </p>\n    </div>\n\n    <div id=\"el_numbers\">\n        <p> 12 </p>\n        <p> 65 </p>\n        <p> 98 </p>\n        <p> 31 </p>\n        <p> 48 </p>\n        <p> 74 </p>\n        <p> 32 </p>\n        <p> 41 </p>\n        <p> 57 </p>\n    </div>"]},{"frage":"Filter:\nFüge ein Eingabefeld hinzu. \nDer Div-Container mit der ID \"el_strings\" soll nur Elemente anzeigen, deren Inhalt die Eingabe enthält.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let inputFilter = document.querySelector('#inputFilter');\n let pTags = [...document.querySelectorAll('#el_strings p')];\n \n inputFilter.addEventListener('input', () => {\n  pTags.forEach(el => {\n   console.log(el.innerHTML);\n   if (el.innerHTML.includes(inputFilter.value)) {\n    el.classList.remove('hidden');\n   } else {\n    el.classList.add('hidden');\n   }\n  })\n })\n});","document.addEventListener(\"DOMContentLoaded\", evt => {\n let inputFilter = document.querySelector('#inputFilter');\n let elStrings = document.querySelector('#el_strings');\n let pTags = [...document.querySelectorAll('#el_strings p')];\n\n inputFilter.addEventListener('input', () => {\n  elStrings.innerHTML = '';\n  pTags.filter(el => el.innerHTML.includes(inputFilter.value))\n   .forEach(el => elStrings.append(el));\n  })\n});"]},{"frage":"Sortieren:\nFüge einen Button hinzu.\nSobald der Button gedrückt wird, sollen die Inhalte sortiert werden.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let btnSort = document.querySelector('#btnSort');\n let elNumbers = document.querySelector('#el_numbers');\n let pTags = [...document.querySelectorAll('#el_numbers p')];\n\n btnSort.addEventListener('click', () => {\n  pTags.sort((a, b) => Number(a.innerHTML) > Number(b.innerHTML) ? 1 : -1)\n  elNumbers.innerHTML = '';\n  pTags.forEach(el => elNumbers.append(el));\n })\n});"]},{"frage":"Suchen:\nAlle p-Tags, in denen der Suchbegriff vorkommt, sollen farbig makriert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Suchen 2:\nAlle Fundstellen des Suchberiffes sollen in der Seite farbig markiert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Kopieren","fragen":[{"frage":"Erzeuge ein Array mit 10 zufälligen Zahlen.\nLege eine echte Kopie dieses Arrays an. D.h. eine Änderung in dem originalen Array darf die Kopie nicht ändern.","typ":"praxis","schwierigkeit":0,"antworten":["let a = [];\nfor ( let i = 0; i < 10; i++) \n    a.push(~~(Math.random()*100));\n\nlet b = a.map(el => el);\na[0] = -1;\nconsole.log( b );","let a = [];\nfor ( let i = 0; i < 10; i++) \n    a.push(~~(Math.random()*100));\n\nlet b = [...a];\na[0] = -1;\nconsole.log( b );","let a = [];\nfor ( let i = 0; i < 10; i++) \n    a.push(~~(Math.random()*100));\n\nlet b = a.slice(0);\na[0] = -1;\nconsole.log( b )"]},{"frage":"Erzeuge zwei Arrays mit jeweils 10 zufälligen Zahlen.\nErzeuge ein neues Array und führe die beiden vorigen Arrays darin zusammen.","typ":"praxis","schwierigkeit":0,"antworten":["let a = [1,2,3];\nlet b = [11,22,33];\nlet all = [...a, ...b];\nconsole.log(all);"]},{"frage":"Erweitere dieses Array um drei zufällige Zahlen.","typ":"praxis","schwierigkeit":0,"antworten":["let a = [];\nlet z = () => ~~(Math.random()*100);\nfor ( let i = 0; i < 10; i++) \n    a.push(z());\n\nlet b = [...a, z(), z(), z()];\nconsole.log(a);\nconsole.log(b);","let a = [];\nlet z = () => ~~(Math.random() * 100);\nfor (let i = 0; i < 10; i++)\n    a.push(z());\n\nlet b = a.slice(0);\n\nfor (let i = 0; i < 3; i++) b.push(z());\nconsole.log( b );"]}]},{"name":"Namen","fragen":[{"frage":"Lege zwei Arrays mit einigen Vor- und Nachnamen an.\nErzeuge 20 zufällige Vorname/Nachname-Kombinationen und lass sie ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":["const zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nconst zufallsAuswahl = (sammlung) => {\n    return sammlung[zufallErzeugen(0,sammlung.length-1)];\n}\nlet name = `${zufallsAuswahl(weiblich)} ${zufallsAuswahl(nachnamen)}`;\nconsole.log(name);"]},{"frage":"Lass einige der Kombinationen Doppelnamen tragen.","typ":"praxis","schwierigkeit":0,"antworten":["let maennlich = ['Ralf', 'Erwin', 'Jürgen', 'Harald', 'Stefan'];\nlet weiblich = ['Erika', 'Julia', 'Rosamunde', 'Melanie', 'Jasmin'];\nlet nachnamen = ['Schmidt', 'Müller', 'Meyer', 'Schulz', 'Kowalski'];\n\nconst zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nconst zufallsAuswahl = (sammlung, anzahl) => {\n    let auswahl = [];\n    sammlung = [...sammlung];\n    for (let i = 0; i < anzahl; i++) {\n        auswahl.push(sammlung.splice(zufallErzeugen(0, sammlung.length - 1), 1)[0]);\n    }\n    return auswahl;\n}\n\nlet name = zufallsAuswahl(weiblich, zufallErzeugen(1,2)).join('-');\nname += ' ';\nname += zufallsAuswahl(nachnamen, zufallErzeugen(1,2)).join('-');\n\nconsole.log(name);"]}]},{"name":"CSV","fragen":[{"frage":"Wandle einen String wie \"4, 85, 26, 14, 19, 15, 23\" in ein Array um, das nach Größe sortiert ist.","typ":"praxis","schwierigkeit":0,"antworten":["let s = '4, 85, 26, 14, 19, 15, 23';\nlet a = s.split(', ');\na.sort((a,b) => a - b);\nconsole.log(a);","let s = '4, 85, 26, 14, 19, 15, 23';\nlet a = s.split(',').map(el => Number(el.trim()));\na.sort((a,b) => a - b);\nconsole.log(a);"]},{"frage":"Lass für jeden Wert, der größer als 18 ist ausgeben, wie weit dieser von 18 entfernt ist.","typ":"praxis","schwierigkeit":0,"antworten":["let s = '4, 85, 26, 14, 19, 15, 23';\nlet a = s.split(',').map(el => Number(el.trim()));\n\na = a.filter(el => el > 18)\n    .map(el => el - 18)\n    .forEach(el => console.log(el));"]},{"frage":"Wandle einen String wie \"Werner, 12; Amelie, 24; Jürgen, 41; Julia, 31; Marek, 21; Indra, 28\" in ein Array um. Das Array soll Objekte mit Namen und Alter enthalten. ","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Werner, 12; Amelie, 24; Jürgen, 41; Julia, 31; Marek, 21; Indra, 28';\n\nlet a = s.split(';')\n    .map(el => el.trim())\n    .map(el => {\n        let temp = el.split(',').map(el => el.trim());\n        return {\n            name: temp[0],\n            alter: temp[1]\n        }\n    });\n\nconsole.log(a);"]},{"frage":"Wie oben und die Objekte im Array soll nach Alter sortiert werden.","typ":"praxis","schwierigkeit":0,"antworten":["let s = 'Werner, 12; Amelie, 24; Jürgen, 41; Julia, 31; Marek, 21; Indra, 28';\n\nlet a // Wie oben\n\na.sort((a, b) => {\n    return a.alter - b.alter;\n})\nconsole.log(a);"]}]},{"name":"DNA","fragen":[{"frage":"Erzeuge mit Hilfe einer Schleife ein Array mit einer Länge von 500 Zeichen, der aus den Zeichen A, G, C und T besteht.\nDiese sollen mit einer Wahrscheinlichkeit von jeweils 25% zufällig ausgewählt werden.","typ":"praxis","schwierigkeit":0,"antworten":["let zeichen = ['A','C','G','T'];\nlet dna = [];\nconst zufall = () => ~~(Math.random() * zeichen.length);\nfor ( let i = 0; i < 500; i++ ) dna.push( zeichen[zufall()]);\nconsole.log(dna.join(' '));"]},{"frage":"Ersetze im Array jedes G durch ein Y.","typ":"praxis","schwierigkeit":0,"antworten":["let zeichen = ['A', 'C', 'G', 'T'];\nlet dna = [];\nconst zufall = () => ~~(Math.random() * zeichen.length);\nfor (let i = 0; i < 500; i++) dna.push(zeichen[zufall()]);\ndna = dna.map(el => el == 'G' ? 'Y' : el);\nconsole.log(dna.join(' '));"]}]},{"name":"Higher Class","fragen":[{"frage":"Erzeuge ein Array, das aus Objekten mit Personaldaten besteht.\nDiese sollen den Vornamen, Nachnamen und die Abteilung enthalten.","typ":"praxis","schwierigkeit":0,"antworten":["let data = [{\n    vname: 'Max',\n    nname: 'Mustermann',\n    abteilung: 'HR'\n},{\n    vname: 'Erika',\n    nname: 'Exampel',\n    abteilung: 'Admin'\n},{\n    vname: 'Marion',\n    nname: 'Musterfrau',\n    abteilung: 'Finanzen'\n},{\n    vname: 'Anton',\n    nname: 'Meier',\n    abteilung: 'HR'\n},{\n    vname: 'Sabine',\n    nname: 'Sauer',\n    abteilung: 'Admin'\n},{\n    vname: 'Armin',\n    nname: 'Lenhardt',\n    abteilung: 'Admin'\n},{\n    vname: 'Hannah',\n    nname: 'Muszkie',\n    abteilung: 'HR'\n}];\n"]},{"frage":"Alle Personen in der Datensammlung sollen durch JS-Code zusätzlich ein Geburtsjahr erhalten.","typ":"praxis","schwierigkeit":0,"antworten":["const createNumber = (min, max) => ~~(Math.random() * (max - min + 1) + min);\ndata = data.map(pers => {\n    pers.geb = createNumber(1960, 2000);\n    return pers;\n})\nconsole.log(data);"]},{"frage":"Aus den Daten sollen alle Personen gesucht werden, die in der Admin-Abteilung arbeiten.","typ":"praxis","schwierigkeit":0,"antworten":["let admin = data.filter(el => el.abteilung.toLowerCase() == 'admin');\nconsole.log(admin);"]},{"frage":"Aus den Daten sollen alle Personen gesucht werden, die in der HR-Abteilung arbeiten und jünger sind als 18","typ":"praxis","schwierigkeit":0,"antworten":["const createNumber = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nlet data = [ Hier Daten eintragen ];\n\ndata = data.map(pers => {\n    pers.geb = createNumber(2000, 2017);\n    return pers;\n})\n\nlet admin = data\n    .filter(el => el.abteilung.toLowerCase() == 'hr')\n    .filter(el => (new Date().getFullYear() - el.geb) < 18 )\n\nconsole.log(admin);"]},{"frage":"Aus den Daten soll ermittelt werden, wie hoch das Durchschnittsalter der Personen ist.","typ":"praxis","schwierigkeit":0,"antworten":["\ndata = data.map(pers => {\n    pers.geb = createNumber(2000, 2017);\n    return pers;\n})\n\nlet alter = data.reduce(\n    (sum, el) => sum + (new Date().getFullYear() - el.geb),\n    0\n);\nalter /= data.length;\nconsole.log(alter.toFixed(1));"]}]}]},{"name":"Objekte","parts":[{"name":"Objekt","fragen":[{"frage":"Lege ein Objekt an, das für ein Gebäude die folgenden Informationen enthält:\n\n    Strasse\n    Hausnummer\n    Postleitzahl\n    Ort\n    Eigentümer ","typ":"praxis","schwierigkeit":0,"antworten":["let haus = {\n    strasse:'Mustergasse',\n    hnr:'12b',\n    plz:'01478',\n    ort: 'Musterhausen',\n    eigentuemer: 'Max Mustermann'\n}","let haus = {\n    adresse: {\n        strasse: 'Mustergasse',\n        hnr: '12b',\n        plz: '01478',\n        ort: 'Musterhausen',\n    },\n    eigentuemer: {\n        vname: 'Max',\n        nname: 'Mustermann',\n        adresse: { /* Adressdaten */ }\n    }\n}\n\nconsole.log(haus);"]},{"frage":"Füge zu dem Objekt eine Methode hinzu, welche als Rückgabewert die gesamte Adresse als String liefert.\nBenutze diese Methode, um die gesamte Adresse auszugeben.","typ":"praxis","schwierigkeit":0,"antworten":["let haus = {\n    adresse: {\n        strasse: 'Mustergasse',\n        hnr: '12b',\n        plz: '01478',\n        ort: 'Musterhausen',\n    },\n    eigentuemer: {\n        vname: 'Max',\n        nname: 'Mustermann',\n        adresse: { /* Adressdaten */ }\n    },\n    get getAdresse(){\n        return `${this.adresse.strasse} ${this.adresse.hnr}\\n${this.adresse.plz} ${this.adresse.ort}`\n    }\n}\n\nconsole.log(haus.getAdresse);","let haus = {\n    adresse: {\n        strasse: 'Mustergasse', hnr: '12b', plz: '01478', ort: 'Musterhausen',\n        getAdresse(isHtml = true) {\n            let ausgabe = `${this.strasse} ${this.hnr}`;\n            ausgabe += isHtml ? '<br />' : '\\n';\n            ausgabe += `${this.plz} ${this.ort}`;\n            return ausgabe;\n        }\n    },\n    eigentuemer: { vname: 'Max', nname: 'Mustermann', adresse: { /* Adressdaten */ } },\n\n}\n\nconsole.log(haus.adresse.getAdresse());\nconsole.log(haus.adresse.getAdresse(false));"]},{"frage":"Erweitere das Objekt durch ein Array.\nDieses Array soll vier Mietparteien darstellen, jede in einem eigenen Objekt.\nJedes Mietparteien-Objekt soll enthalten:\n<ul>\n    <li>Vorname</li>\n    <li>Nachname</li>\n    <li>Wohnungsnummer</li>\n    <li>Kaltmiete </li>\n</ul>","typ":"praxis","schwierigkeit":0,"antworten":["let haus = {\n    adresse: {\n        strasse: 'Mustergasse', hnr: '12b', plz: '01478', ort: 'Musterhausen',\n        getAdresse(isHtml = true) {\n            let ausgabe = `${this.strasse} ${this.hnr}`;\n            ausgabe += isHtml ? '<br />' : '\\n';\n            ausgabe += `${this.plz} ${this.ort}`;\n            return ausgabe;\n        }\n    },\n    eigentuemer: { vname: 'Max', nname: 'Mustermann', adresse: { /* Adressdaten */ } },\n    mieter: [],\n    neuerMieter(vname, nname, wnr, km){\n        this.mieter.push({vname, nname, wnr, km});\n    }\n}\n\nconst init = () => {\n    haus.neuerMieter( 'Max', 'Mustermann', 2, 500 );\n    haus.neuerMieter( 'Beate', 'Beispiel', 4, 350 );\n    haus.neuerMieter( 'Alex', 'Anderson', 3, 380 );\n    haus.neuerMieter( 'Julia', 'Janke', 1, 550 );\n    \n    console.log( haus );\n}\n\ninit();"]},{"frage":"Gib den ganzen Namen des zweiten Mieters aus.","typ":"praxis","schwierigkeit":0,"antworten":["let haus = {\n    // ...\n    getNameOfMieter(wnr){\n        // Mieter[1] ausgeben macht keinen Sinn, da diese Information für unseren Kunden nichts bringt\n        // Besser: \n        let gesuchterMieter = this.mieter.find( el => el.wnr == wnr );\n        if ( gesuchterMieter )\n            return `${gesuchterMieter.vname} ${gesuchterMieter.nname}`;\n        else \n            return `Wohnungsnummer unbekannt`\n    }\n}\n\nconst init = () => {\n    // Mieter eintragen\n    \n    console.log( haus.getNameOfMieter(1) );\n    console.log( haus.getNameOfMieter(5) );\n}\n\ninit();"]},{"frage":"Errechne die gesamte Kaltmiete, die das Gebäude einbringt.","typ":"praxis","schwierigkeit":0,"antworten":["let haus = {\n    // ...\n    get kmGesamt(){\n        return this.mieter.reduce( (sum, el) => sum + el.km, 0 );\n    }\n}\n \nconst init = () => {\n    // Mieter eintragen\n    \n    console.log( haus.kmGesamt );\n}\n\ninit();"]},{"frage":"Erstelle eine Methode, die die Daten aller Mieter im DOM ausgibt.","typ":"praxis","schwierigkeit":0,"antworten":["let createElement = (\n    inhalt = false,\n    typ = 'div',\n    eltern = document.querySelector('#ausgabe')\n) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    eltern.append(neu);\n    return neu;\n}\n\nlet haus = {\n    // ...\n    allData(eltern) {\n        let sorted = [...this.mieter];\n        sorted.sort((a, b) => a.wnr < b.wnr ? -1 : 1);\n        sorted.forEach(mieter => {\n            let karte = createElement();\n            createElement(`${mieter.vname} ${mieter.nname}`, 'h3', karte);\n            createElement(`Wohnungsnummer: ${mieter.wnr}`, 'div', karte);\n            createElement(`Kaltmiete: ${mieter.km}`, 'div', karte);\n        })\n\n    }\n}\n\nconst init = () => {\n    // ...\n\n    haus.allData(document.querySelector('#ausgabe'));\n}\n\ninit();"]},{"frage":"Erstelle eine Methode, die einen neuen Mieter im Array anlegt.\nWenn die Wohnungsnummer schon existiert, soll der alte Mieter überschrieben werden.","typ":"praxis","schwierigkeit":0,"antworten":["let haus = {\n mieter: [],\n mieterAnlegen(vname, nname, wnr, km) {\n  this.mieter = this.mieter.filter(el => el.wnr != wnr);\n  this.mieter.push({ vname, nname, wnr, km, aktiv: true });\n }\n}\n\nconst init = () => {\n haus.mieterAnlegen('Max', 'Mustermann', 2, 500);\n haus.mieterAnlegen('Beate', 'Beispiel', 4, 350);\n haus.mieterAnlegen('Alex', 'Anderson', 3, 380);\n haus.mieterAnlegen('Julia', 'Janke', 1, 550);\n\n haus.mieterAnlegen('Hans', 'Glück', 2, 400);\n\n console.log(haus);\n}\n\ninit();","// U.U. sollen die Daten nicht gelöscht werden, um den Mietter später kontaktieren zu können\nlet haus = {\n mieter: [],\n mieterAnlegen(vname, nname, wnr, km) {\n  this.mieter\n   .filter(el => el.wnr == wnr)\n   .forEach(el => el.aktiv = false);\n  this.mieter.push({ vname, nname, wnr, km, aktiv: true });\n }\n}\n\nconst init = () => {\n haus.mieterAnlegen('Max', 'Mustermann', 2, 500);\n haus.mieterAnlegen('Beate', 'Beispiel', 4, 350);\n haus.mieterAnlegen('Alex', 'Anderson', 3, 380);\n haus.mieterAnlegen('Julia', 'Janke', 1, 550);\n\n haus.mieterAnlegen('Hans', 'Glück', 2, 400);\n\n console.log(haus);\n}\n\ninit();"]},{"frage":"Erstelle eine Methode, die einen Mieter im Array löscht.","typ":"praxis","schwierigkeit":0,"antworten":["let haus = {\n    // ...\n    mieterEntfernen(wnr) {\n        this.mieter\n            .filter(el => (el.wnr == wnr) && el.aktiv)\n            .forEach(el => el.aktiv = false);\n    }\n}\n\nconst init = () => {\n    // ...\n    haus.mieterEntfernen(4);\n    haus.mieterEntfernen(1);\n\n    haus.allData(document.querySelector('#ausgabe'));\n}"]},{"frage":"Erstelle einen Server und speichere die Daten des Gebäudes in einer JSON-Datei.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Filmsammlung","fragen":[{"frage":"Erstelle einen Konstruktor / eine Klasse, der Objekte für Kinofilme anlegt.\nJedes Objekt soll die folgenden Informationen enthalten:\n<ul>\n    <li>Filmtitel</li>\n    <li>Regisseur</li>\n    <li>Laufzeit in Minuten</li>\n    <li>Erscheinungsjahr </li>\n</ul>\nVerwende diesen Konstruktor, um 4 Filme Deiner Wahl als Objekt anzulegen.","typ":"praxis","schwierigkeit":0,"antworten":["// VARIABLEN\n        let personen = [], filmsammlung = [];\n\n        // FUNKTIONEN\n        const getNextID = sammlung => {\n            return sammlung.reduce((max, el) => Math.max(max, el.id), 0) + 1;\n        }\n        // Klassen\n        class Person {\n            constructor(vname, nname, sammlung = personen) {\n                this.vname = vname;\n                this.nname = nname;\n                this.id = getNextID(sammlung);\n            }\n        }\n        class Film {\n            constructor(titel, regie, laufzeit, erschienen, sammlung = filmsammlung) {\n                this.titel = titel;\n                this.regie = regie;\n                this.laufzeit = laufzeit;\n                this.erschienen = erschienen;\n                this.id = getNextID(sammlung);\n            }\n        }\n\n        // VARIABLEN\n        personen.push(new Person('Brian', 'de Palma'));\n        personen.push(new Person('Lana', 'Wachowsky'));\n        personen.push(new Person('Lilly', 'Wachowsky'));\n        personen.push(new Person('Tom', 'Tykwer'));\n        personen.push(new Person('Robert', 'Zemeckis'));\n\n        console.log(personen);\n\n        filmsammlung.push(new Film('Scarface', [0], 170, 1983));\n        filmsammlung.push(new Film('Matrix', [1, 2], 136, 1999));\n        filmsammlung.push(new Film('Cloud Atlas', [2, 3], 172, 2012));\n        filmsammlung.push(new Film('Cast Away', [4], 170, 1983));\n\n        console.log(filmsammlung);"]},{"frage":"Erweitere den Konstruktor durch eine Methode, die das aktuelle Alter des Filmes per return liefert","typ":"praxis","schwierigkeit":0,"antworten":["class Film {\n            // ...\n            get alter(){\n                return new Date().getFullYear() - this.erschienen;\n            }\n        }"]},{"frage":"Erweitere den Konstruktor für Kinofilme um ein Attribut, das den Cast enthält.","typ":"praxis","schwierigkeit":0,"antworten":["\n        // VARIABLEN\n        let personen = [], filmsammlung = [];\n\n        // FUNKTIONEN\n        const getNextID = sammlung => {\n            return sammlung.reduce((max, el) => Math.max(max, el.id), 0) + 1;\n        }\n        // Klassen\n        class Person {\n            constructor(vname, nname, sammlung = personen) {\n                this.vname = vname;\n                this.nname = nname;\n                this.id = getNextID(sammlung);\n            }\n        }\n        class Film {\n            constructor(titel, regie, cast, laufzeit, erschienen, sammlung = filmsammlung) {\n                this.titel = titel;\n                this.regie = regie;\n                this.laufzeit = laufzeit;\n                this.erschienen = erschienen;\n                this.cast = cast;\n                this.id = getNextID(sammlung);\n            }\n            get alter() {\n                return new Date().getFullYear() - this.erschienen;\n            }\n        }\n\n        // VARIABLEN\n        personen.push(new Person('Brian', 'de Palma'));\n        personen.push(new Person('Lana', 'Wachowsky'));\n        personen.push(new Person('Lilly', 'Wachowsky'));\n        personen.push(new Person('Tom', 'Tykwer'));\n        personen.push(new Person('Robert', 'Zemeckis'));\n        personen.push(new Person('Tom', 'Hanks'));\n        personen.push(new Person('Halle', 'Berry'));\n        personen.push(new Person('Hugo', 'Weaving'));\n        personen.push(new Person('Keanu', 'Reeves'));\n        personen.push(new Person('Carrie-Anne', 'Moss'));\n        personen.push(new Person('Al', 'Pacino'));\n        personen.push(new Person('Michelle', 'Pfeiffer'));\n\n        console.log(personen);\n\n        filmsammlung.push(new Film('Scarface', [0], [11, 12], 170, 1983));\n        filmsammlung.push(new Film('Matrix', [1, 2], [9, 10], 136, 1999));\n        filmsammlung.push(new Film('Cloud Atlas', [2, 3], [6, 7, 8], 172, 2012));\n        filmsammlung.push(new Film('Cast Away', [4], [6], 170, 1983));\n\n        console.log(filmsammlung);\n\n        console.log(filmsammlung[0].alter);"]},{"frage":"Erstelle weitere Konstruktoren für die Speicherung von Dokumentationen und Urlaubsfilmen","typ":"praxis","schwierigkeit":0,"antworten":["// VARIABLEN\n        let personen = [], filmsammlung = [];\n\n        // FUNKTIONEN\n        const getNextID = sammlung => {\n            return sammlung.reduce((max, el) => Math.max(max, el.id), 0) + 1;\n        }\n        // Klassen\n        class Person {\n            constructor(vname, nname, sammlung = personen) {\n                this.vname = vname;\n                this.nname = nname;\n                this.id = getNextID(sammlung);\n            }\n        }\n        class Film {\n            constructor(titel, laufzeit, erschienen, sammlung = filmsammlung) {\n                this.titel = titel;\n                this.laufzeit = laufzeit;\n                this.erschienen = erschienen;\n                this.id = getNextID(sammlung);\n            }\n            get alter() {\n                return new Date().getFullYear() - this.erschienen;\n            }\n        }\n        class Kinofilm extends Film {\n            constructor(titel, regie, cast, laufzeit, erschienen, sammlung = filmsammlung) {\n                super (titel, laufzeit, erschienen, sammlung );\n                this.regie = regie;\n                this.cast = cast;\n            }\n        }\n        class Doku extends Film {\n            constructor(titel, thema, laufzeit, erschienen, sammlung = filmsammlung) {\n                super (titel, laufzeit, erschienen, sammlung );\n                this.thema = thema;\n            }\n        }\n        class Urlaubsfilm extends Film {\n            constructor(titel, ort, laufzeit, erschienen, sammlung = filmsammlung) {\n                super (titel, laufzeit, erschienen, sammlung );\n                this.ort = ort;\n            }\n        }\n\n        // VARIABLEN\n        personen.push(new Person('Brian', 'de Palma'));\n        personen.push(new Person('Lana', 'Wachowsky'));\n        personen.push(new Person('Lilly', 'Wachowsky'));\n        personen.push(new Person('Tom', 'Tykwer'));\n        personen.push(new Person('Robert', 'Zemeckis'));\n        personen.push(new Person('Tom', 'Hanks'));\n        personen.push(new Person('Halle', 'Berry'));\n        personen.push(new Person('Hugo', 'Weaving'));\n        personen.push(new Person('Keanu', 'Reeves'));\n        personen.push(new Person('Carrie-Anne', 'Moss'));\n        personen.push(new Person('Al', 'Pacino'));\n        personen.push(new Person('Michelle', 'Pfeiffer'));\n\n        console.log(personen);\n\n        filmsammlung.push(new Kinofilm('Scarface', [0], [11, 12], 170, 1983));\n        filmsammlung.push(new Kinofilm('Matrix', [1, 2], [9, 10], 136, 1999));\n        filmsammlung.push(new Kinofilm('Cloud Atlas', [2, 3], [6, 7, 8], 172, 2012));\n        filmsammlung.push(new Kinofilm('Cast Away', [4], [6], 170, 1983));\n        filmsammlung.push(new Doku('Calculating Ada', 'Mathematik', 58, 2019));\n        filmsammlung.push(new Urlaubsfilm('Mallorca Cool', 'Mallorca', 45, 2014));\n\n        console.log(filmsammlung);\n\n        console.log(filmsammlung[0].alter);"]}]}]},{"name":"Lokal speichern","parts":[{"name":"Cookies","fragen":[{"frage":"Sobald die Webseite aufgerufen wird, soll das aktuelle Datum und Uhrzeit in einen Cookie abgelegt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wird die Webseite ein weiteres Mal aufgerufen, soll die Zeit des letzten Aufrufs dargestellt werden. ","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Localstorage","fragen":[{"frage":"Sobald die Webseite aufgerufen wird, soll das aktuelle Datum und Uhrzeit im Localstorage abgelegt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wird die Webseite ein weiteres Mal aufgerufen, soll die Zeit des letzten Aufrufs dargestellt werden. ","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Eingaben speichern","fragen":[{"frage":"Lege eine Webseite mit einem Textarea an.\nSobald der Benutzer eine Eingabe macht, soll diese im Localstorage gespeichert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Sobald die Seite geladen wird, soll die letzte Eingabe aus dem Localstorage geladen und in das Textarea eingetragen werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Ein Button soll die gespeicherten Daten entfernen.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Es sollen neben der letzten Eingabe alle bisherigen Eingaben gespeichert und geladen werden können.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Verlauf","fragen":[{"frage":"Lege eine Seite mit mehreren Unterseiten an.\nDie Reihenfolge der aufgerufenen Seiten soll im Localstorage gespeichert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"CMS","fragen":[{"frage":"Erstelle eine Seite mit einem Textarea und einem Button. Wenn der Button gedrückt wird, dann wird der Inhalt an den Server gesendet und dort gespeichert.\nErstelle eine weitere Seite, auf der der gespeicherte Inhalt dargestellt wird.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Jeder Eintrag soll auf der Darstellungsseite ein eigenes Element sein.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Libraries","parts":[{"name":"Eigene Bibliothek","fragen":[{"frage":"Lege Deine eigene Library an.\nDiese soll:\n<ul>\n<li>Eine zufällige Zahl erzeugen</li>\n<li>Ein Array von zufälligen Zahlen erzeugen</li>\n</ul>","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Die Funktion zum Erzeugen des Array soll u.a. einen Parameter annehmen, der steuert, ob das Array Dupletten haben darf.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Lege eine weitere Bibliothek mit den folgenden Funktionen an:\n<ul>\n<li>Erzeugen eines DOM-Elemente</li>\n<li>Erzeugen von mehreren DOM-Elementen. Diese Funktion soll ein Array als Parameter annehmen. Die Werte des Arrays sollen in die DOM-Elemente geschrieben werden.</li>\n</ul>","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Fremde Bibliothek","fragen":[{"frage":"Wähle aus der Webseite https://www.javascripting.com fünf Bibliotheken aus, die interessant klingen.\nLege für jede der Bibliotheken eine Webseite an, in welche die Bibliothek eingebunden wird.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Ajax (Dateien laden)","parts":[{"name":"JSON","fragen":[{"frage":"Lade die Datei data.json und stelle die Fragen auf der Webseite dar.\nDie Dateien zum Download liegen in uebungen/public/ajax","typ":"praxis","schwierigkeit":0,"antworten":["const processData = data => {\n console.log(data);\n data.questions.forEach(el => {\n  const neu = document.createElement('div');\n  neu.innerHTML = el.question;\n  document.body.append(neu);\n })\n}\n\nconst xhr = new XMLHttpRequest();\nxhr.open('get', './data.json');\nxhr.addEventListener('load', () => {\n if (xhr.status == 200) processData(JSON.parse(xhr.responseText));\n else console.log(xhr.statusText);\n})\nxhr.send();\n","const processData = data => {\n data.questions.forEach(el => {\n  const neu = document.createElement('div');\n  neu.innerHTML = el.question;\n  document.body.append(neu);\n })\n}\n\nfetch('./data.json').then(\n res => res.json()\n).then(\n processData\n).catch(\n console.log\n)"]},{"frage":"Stelle neben den Fragen auch die Antworten dar.","typ":"praxis","schwierigkeit":0,"antworten":["const processData = data => {\n console.log(data);\n data.questions.forEach(el => {\n  const container = document.createElement('div');\n  container.className = 'frage';\n  document.body.append(container);\n\n  const frage = document.createElement('h3');\n  frage.innerHTML = el.question;\n  container.append(frage);\n\n  el.answers.forEach(answer => {\n   const antwort = document.createElement('p');\n   antwort.innerHTML = answer.antwort;\n   container.append(antwort);\n  })\n })\n}\n\nfetch('./data.json').then(\n res => res.json()\n).then(\n processData\n).catch(\n console.log\n)","const processData = data => {\n console.log(data);\n data.questions.forEach(el => {\n  const container = document.createElement('div');\n  container.className = 'frage';\n  document.body.append(container);\n\n  const frage = document.createElement('h3');\n  frage.innerHTML = el.question;\n  container.append(frage);\n\n  el.answers.forEach(answer => {\n   const antwort = document.createElement('p');\n   antwort.innerHTML = answer.antwort;\n   container.append(antwort);\n  })\n })\n}\n\nconst xhr = new XMLHttpRequest();\nxhr.open('get', './data.json');\nxhr.addEventListener('load', () => {\n if (xhr.status == 200) processData(JSON.parse(xhr.responseText));\n else console.log(xhr.statusText);\n})\nxhr.send();"]},{"frage":"Wenn die richtige Antwort angeklickt wurde, soll eine Gratulation erscheinen.\nBei der falschen kommt eine entsprechende Meldung.","typ":"praxis","schwierigkeit":0,"antworten":["const processData = data => {\n    console.log(data);\n    data.questions.forEach(el => {\n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n\n        const frage = document.createElement('h3');\n        frage.innerHTML = el.question;\n        container.append(frage);\n\n        el.answers.forEach(answer => {\n            console.log(answer);\n            const antwortEl = document.createElement('p');\n            antwortEl.innerHTML = answer.antwort;\n            container.append(antwortEl);\n            antwortEl.addEventListener('click', () => {\n                if (answer.true) alert(`${answer.antwort} ist richtig`)\n                else alert(`${answer.antwort} ist falsch`)\n            })\n        })\n    })\n}\n\n\nconst xhr = new XMLHttpRequest();\nxhr.open('get', './data.json');\nxhr.addEventListener('load', () => {\n    if (xhr.status == 200) processData(JSON.parse(xhr.responseText));\n    else console.log(xhr.statusText);\n})\nxhr.send();\n\n\n","const processData = data => {\n    console.log(data);\n    data.questions.forEach(el => {\n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n\n        const frage = document.createElement('h3');\n        frage.innerHTML = el.question;\n        container.append(frage);\n\n        el.answers.forEach(answer => {\n            console.log(answer);\n            const antwortEl = document.createElement('p');\n            antwortEl.innerHTML = answer.antwort;\n            container.append(antwortEl);\n            antwortEl.addEventListener('click', () => {\n                if (answer.true) alert(`${answer.antwort} ist richtig`)\n                else alert(`${answer.antwort} ist falsch`)\n            })\n        })\n    })\n}\n\nfetch('./data.json').then(\n    res => res.json()\n).then(\n    processData\n).catch(\n    console.log\n)\n\n"]}]},{"name":"XML","fragen":[{"frage":"Lade die Datei data.xml und stelle die Fragen auf der Webseite dar.","typ":"praxis","schwierigkeit":0,"antworten":["const processData = data => {\n    const questions = [...data.querySelectorAll('question')];\n\n    questions.forEach(q => {\n        let frage = q.childNodes[0].nodeValue.trim();\n        console.log(q.childNodes[0].nodeValue.trim());\n\n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n\n        const frageEl = document.createElement('h3');\n        frageEl.innerHTML = frage;\n        container.append(frageEl);\n    })\n}\n\nconst xhr = new XMLHttpRequest();\nxhr.open('get', './data.xml');\nxhr.addEventListener('load', () => {\n    if (xhr.status == 200) processData(xhr.responseXML);\n    else console.log(xhr.statusText);\n})\nxhr.send();","\nconst processData = data => {    \n    data.questions.forEach(q => {\n        console.log(q);\n       \n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n\n        const frageEl = document.createElement('h3');\n        frageEl.innerHTML = q.question;\n        container.append(frageEl);\n    })\n}\n\nfetch('./data.json').then(\n    res => res.json()\n).then(\n    processData\n).catch(\n    console.log\n)\n"]},{"frage":"Stelle neben den Fragen auch die Antworten dar.\nDie Antworten sollen anklickbar sein.","typ":"praxis","schwierigkeit":0,"antworten":["const processData = data => {    \n    const questions = [...data.querySelectorAll('question')];\n    \n    questions.forEach(q => {\n        let frage = q.childNodes[0].nodeValue.trim();\n        console.log(q.childNodes[0].nodeValue.trim());\n        \n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n        \n        const frageEl = document.createElement('h3');\n        frageEl.innerHTML = frage;\n        container.append(frageEl);\n        \n        const answers = [...q.querySelectorAll('antwort')];\n        console.log(answers);\n        answers.forEach(a => {\n            const antwortEl = document.createElement('p');\n            antwortEl.innerHTML = a.innerHTML;\n            container.append(antwortEl);\n        })\n    })\n}\n\nconst xhr = new XMLHttpRequest();\nxhr.open('get', './data.xml');\nxhr.addEventListener('load', () => {\n    if (xhr.status == 200) processData(xhr.responseXML);\n    else console.log(xhr.statusText);\n})\nxhr.send();\n\n","const processData = data => {\n    data.questions.forEach(q => {\n        console.log(q);\n\n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n\n        const frageEl = document.createElement('h3');\n        frageEl.innerHTML = q.question;\n        container.append(frageEl);\n\n        q.answers.forEach(answer => {\n            const antwortEl = document.createElement('p');\n            antwortEl.innerHTML = answer.antwort;\n            container.append(antwortEl);\n        })\n    })\n}\n\n\nfetch('./data.json').then(\n    res => res.json()\n).then(\n    processData\n).catch(\n    console.log\n)"]},{"frage":"Wenn die richtige Antwort angeklickt wurde, soll eine Gratulation erscheinen.\nBei der falschen kommt eine entsprechende Meldung.","typ":"praxis","schwierigkeit":0,"antworten":["const processData = data => {   \n    const questions = [...data.querySelectorAll('question')];\n    \n    questions.forEach(q => {\n        let frage = q.childNodes[0].nodeValue.trim();\n        \n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n        \n        const frageEl = document.createElement('h3');\n        frageEl.innerHTML = frage;\n        container.append(frageEl);\n        \n        const answers = [...q.querySelectorAll('antwort')];\n        const correct = q.querySelector('correct').innerHTML;\n        console.log(correct);\n\n        answers.forEach((a, index) => {\n            const antwortEl = document.createElement('p');\n            antwortEl.innerHTML = a.innerHTML;\n            container.append(antwortEl);\n            antwortEl.addEventListener('click', () => {\n                if (index+1 == correct) alert(`${a.innerHTML} ist richtig`);\n                else alert(`${a.innerHTML} ist falsch`);\n            })\n        })\n    })\n}\nconst xhr = new XMLHttpRequest();\nxhr.open('get', './data.xml');\nxhr.addEventListener('load', () => {\n    if (xhr.status == 200) processData(xhr.responseXML);\n    else console.log(xhr.statusText);\n})\nxhr.send();","const processData = data => {\n    data.questions.forEach(q => {\n        console.log(q);\n\n        const container = document.createElement('div');\n        container.className = 'frage';\n        document.body.append(container);\n\n        const frageEl = document.createElement('h3');\n        frageEl.innerHTML = q.question;\n        container.append(frageEl);\n\n        q.answers.forEach(answer => {\n            const antwortEl = document.createElement('p');\n            antwortEl.innerHTML = answer.antwort;\n            container.append(antwortEl);\n            antwortEl.addEventListener('click', () => {\n                if (answer.true) alert(`${answer.antwort} ist richtig`)\n                else alert(`${answer.antwort} ist falsch`)\n            })\n        })\n    })\n}\n\n\nfetch('./data.json').then(\n    res => res.json()\n).then(\n    processData\n).catch(\n    console.log\n)"]}]},{"name":"CSV","fragen":[{"frage":"Lade die Datei data.csv und stelle alle Inhalte auf der Webseite dar.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"CMS","fragen":[{"frage":"Lade die Datei content.json und stelle die Inhalte sinnvoll dar.\nBeachte auch die Metadaten.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Iteratoren","parts":[{"name":"Array iterieren","fragen":[{"frage":"Lege ein Array mit 1000 zufälligen Zahlen an.\nMit einem Iterator soll für jede Zahl ein neues DOM-Element erzeugt und auf der Webseite angezeigt werden.","typ":"praxis","schwierigkeit":0,"antworten":["let zahlen = [...new Array(1000)].map(() => ~~(Math.random() * 100));\nlet iter = zahlen.values();\n\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    eltern = ausgabe,\n    typ = 'div',\n} = {}) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nlet i;\nwhile (!(i = iter.next()).done) {\n    DOMElementAnlegen({\n        inhalt: i.value\n    });\n}"]},{"frage":"Lege zusätzlich einen Button an. Jedes Mal, wenn der Button geklickt wird, soll in einem neuen Div-Container die jeweils nächste Zahl aus dem Array angezeigt werden.","typ":"praxis","schwierigkeit":0,"antworten":["const btnNext = document.querySelector('#btnNext');\n\nlet zahlen = [...new Array(1000)].map(() => ~~(Math.random() * 100));\nlet iter = zahlen.values();\n\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    eltern = ausgabe,\n    typ = 'div',\n} = {}) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nbtnNext.addEventListener('click', () => {\n    DOMElementAnlegen({\n        inhalt: iter.next().value\n    });\n})"]},{"frage":"Am Ende soll der Button verschwinden.","typ":"praxis","schwierigkeit":0,"antworten":["const btnNext = document.querySelector('#btnNext');\n\nlet zahlen = [...new Array(5)].map(() => ~~(Math.random() * 100));\nlet iter = zahlen.values();\nlet next = iter.next();\n\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    eltern = ausgabe,\n    typ = 'div',\n} = {}) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nbtnNext.addEventListener('click', () => {\n    DOMElementAnlegen({\n        inhalt: next.value\n    });\n    next = iter.next();\n\n    if (next.done) {\n        btnNext.setAttribute('disabled', true);\n    }\n})"]}]},{"name":"Generator Array","fragen":[{"frage":"Erstelle einen Generator, der alle Elemente eines Arrays sortiert iteriert. Unabhängig davon, wie das Array anfangs sortiert ist.","typ":"praxis","schwierigkeit":0,"antworten":["let data = [21,98,69,57,2,3,5,2,3,542,6,52,84];\n\nconst genDataSorted = function*(sammlung){\n    sammlung = [...sammlung];\n    sammlung.sort((a,b) => a-b);\n    for ( let el of sammlung){\n        yield el;\n    }\n}\n\nlet iterSammlung = genDataSorted(data);\n\nlet el;\nwhile(!(el = iterSammlung.next()).done){\n    console.log( el.value );\n}"]},{"frage":"Erstelle einen Generator, der ein Array rückwärts iteriert","typ":"praxis","schwierigkeit":0,"antworten":["let data = [21,98,69,57,2,3,5,2,3,542,6,52,84];\n\nconst genDataSorted = function*(sammlung){\n    sammlung = [...sammlung];\n    sammlung.sort((a,b) => b-a);\n    for ( let el of sammlung){\n        yield el;\n    }\n}\n\nlet iterSammlung = genDataSorted(data);\n\nlet el;\nwhile(!(el = iterSammlung.next()).done){\n    console.log( el.value );\n}"]}]},{"name":"Generator Object","fragen":[{"frage":"Erstelle einen Generator, der alle Attribute eines Objektes iteriert.","typ":"praxis","schwierigkeit":0,"antworten":["let genObjekt = function* (objekt) {\n    console.log(objekt);\n\n    for (let key in objekt) {\n        yield {\n            key: key,\n            val: objekt[key]\n        }\n    }\n}\n\n//let iter = genObjekt({ a: 1, b: 2, c: 3 });\nlet iter = genObjekt(document.querySelector('#ausgabe'));\n\nlet el;\nwhile (!(el = iter.next()).done) {\n    console.log(el.value.key, el.value.val);\n}"]},{"frage":"Erstelle einen Generator, der alle Attribute eines Objektes außer den Methoden iteriert.","typ":"praxis","schwierigkeit":0,"antworten":["let genObjekt = function* (objekt) {\n    console.log(objekt);\n\n    for (let key in objekt) {\n        if (typeof objekt[key] != 'function')\n            yield {\n                key: key,\n                val: objekt[key]\n            }\n    }\n}\n\n//let iter = genObjekt({ a: 1, b: 2, c: 3 });\nlet iter = genObjekt(document.querySelector('#ausgabe'));\n\nlet el;\nwhile (!(el = iter.next()).done) {\n    console.log(el.value.key, el.value.val);\n}"]},{"frage":"Erstelle einen Generator, der alle Attribute eines DOM-Objektes außer den Methoden und den Eventlisteners.","typ":"praxis","schwierigkeit":0,"antworten":["let genObjekt = function* (objekt) {\n    console.log(objekt);\n\n    for (let key in objekt) {\n        if (typeof objekt[key] != 'function' && !key.startsWith('on'))\n            yield {\n                key: key,\n                val: objekt[key]\n            }\n    }\n}\n\n//let iter = genObjekt({ a: 1, b: 2, c: 3 });\nlet iter = genObjekt(document.querySelector('#ausgabe'));\n\nlet el;\nwhile (!(el = iter.next()).done) {\n    console.log(el.value.key, el.value.val);\n}"]}]},{"name":"Lfd Nummer","fragen":[{"frage":"Erstelle einen Generator, der eine laufende Nummer ausgibt.\nEs soll kein Ende geben.","typ":"praxis","schwierigkeit":0,"antworten":["let meinGenerator = function* () {\n    let i = 0;\n    while (true) {\n        yield i++;\n    }\n}\n\nlet meinIterator = meinGenerator();\n\nbtnNext.addEventListener('click', () => {\n    console.log( meinIterator.next().value );\n})"]},{"frage":"Erstelle einen Generator, der bei jedem Aufruf die nächste Primzahl ausgibt\nEs soll kein Ende geben.","typ":"praxis","schwierigkeit":0,"antworten":["const isPrime = zahl => {\n    for (let i = 2; (i * i) <= zahl; i++) {\n        if (!(zahl % i)) return false;\n    }\n    return true\n}\n\nlet meinGenerator = function* () {\n    let i = 2;\n    while (true) {\n        if (isPrime(i)) yield i;\n        i++;\n    }\n}\n\nlet meinIterator = meinGenerator();\n\nbtnNext.addEventListener('click', () => {\n    console.log(meinIterator.next().value);\n})"]}]}]},{"name":"Maps / Sets","parts":[{"name":"Undostack","fragen":[{"frage":"Auf der Webseite sollen beliebig viele Elemente mit Textarea und Undo-Knopf liegen.\nWenn der Knopf geklickt wird, soll die letzte Eingabe zurückgenommen werden. ","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n    // Variablen\n    let eingabeElemente = document.querySelectorAll('.eingabe');\n    let elementdaten = new Map();\n\n    // FUNKTIONEN\n    const init = () => {\n        eingabeElemente.forEach(el => {\n            let ta = el.querySelector('textarea');\n            let btn = el.querySelector('button');\n\n            // Undo-Stack (und ggf. anderes) anlegen\n            elementdaten.set(el, {\n                undo: ''\n            })\n\n            // Undo-Schritt eintragen\n            ta.addEventListener('keydown', evt => {\n                if (evt.key != 'Shift' &&\n                    evt.key != 'Control' &&\n                    evt.key != 'Alt'\n                ) {\n                    elementdaten.get(el).undo = ta.value;\n                };\n\n            })\n\n            // Undo-Button\n            btn.addEventListener('click', evt => {\n                ta.value = elementdaten.get(el).undo;\n            })\n\n\n        })\n        console.log(elementdaten);\n\n    }\n\n    // INIT\n    init();\n\n});"]},{"frage":"Der Button soll mehrfach geklickt werden können und bei jedem Schritt wird im Undo-Stack ein Schritt zurückgenommen.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n    // Variablen\n    let eingabeElemente = document.querySelectorAll('.eingabe');\n    let eingaben = document.querySelector('#eingaben');\n    let elementdaten = new Map();\n    let ignoreKeys = 'Shift Control Alt ArrowLeft ArrowRight ArrowUp ArrowDown'.split(' ');\n\n\n    let texte = [\n        'Er hörte leise Schritte hinter sich. Das bedeutete nichts Gutes.',\n        'Wer würde ihm schon folgen, spät in der Nacht und dazu noch in dieser engen Gasse mitten im übel beleumundeten Hafenviertel?',\n        'Gerade jetzt, wo er das Ding seines Lebens gedreht hatte und mit der Beute verschwinden wollte!',\n        'Hatte einer seiner zahllosen Kollegen dieselbe Idee gehabt, ihn beobachtet und abgewartet, um ihn nun um die Früchte seiner Arbeit zu erleichtern?'\n    ]\n\n    // FUNKTIONEN\n    // Debouncing wird erst durchgeführt, wenn nach einer Wartezwit (delay)\n    // Die Funktion kein weiteres Mal angestoßen wird\n    const debounce = (dieFunktion, delay) => {\n        let warte;\n        return evt => {\n            let puffer = evt.target.value;\n            clearTimeout(warte);\n            warte = setTimeout(\n                () => dieFunktion(evt, puffer),\n                delay\n            )\n        }\n    }\n\n\n    const DOMElementAnlegen = ({\n        inhalt = '',\n        typ = 'div',\n        eltern = ausgabe,\n        klassen = [],\n        attr = {},\n        listeners = {},\n        styles = {},\n        amEnde = true,\n    } = {}) => {\n        let neu = document.createElement(typ);\n        if (inhalt) neu.innerHTML = inhalt;\n        if (klassen.length) neu.className = klassen.join(' ');\n\n        Object.entries(attr).forEach(el => neu.setAttribute(...el));\n        Object.entries(listeners).forEach(el => neu.addEventListener(...el));\n        Object.entries(styles).forEach(style => neu.style[style[0]] = style[1]);\n\n        console.log(eltern);\n\n\n        if (!amEnde && eltern.children.length) eltern.insertBefore(neu, eltern.children[0]);\n        else eltern.append(neu);\n\n        return neu;\n    }\n\n    const templateEingabeelement = (inhalt = '', eltern = eingaben) => {\n        let container = DOMElementAnlegen({\n            eltern,\n            klassen: ['eingabe']\n        })\n\n        // Undo-Stack (und ggf. anderes) anlegen\n        elementdaten.set(container, {\n            undostack: []\n        })\n\n        // Textarea\n        let ta = DOMElementAnlegen({\n            typ: 'textarea',\n            eltern: container,\n            inhalt,\n            listeners: {\n                // Undo-Schritt eintragen\n                keydown: debounce(tastenanschlag, 200)\n            }\n        })\n\n        // Button\n        DOMElementAnlegen({\n            typ: 'button',\n            eltern: container,\n            inhalt: 'Undo',\n            listeners: {\n                click(evt) {\n                    let undo = elementdaten.get(container).undostack;\n                    console.log(undo);\n\n                    if (undo.length) {\n                        ta.value = undo.splice(undo.length - 1, 1)[0];\n                    }\n                }\n            }\n        })\n    }\n\n    const tastenanschlag = (evt, puffer) => {\n        if (!ignoreKeys.includes(evt.key)) {\n            elementdaten.get(evt.target.parentNode).undostack.push(puffer);\n        };\n    }\n\n    const init = () => {\n        texte.forEach(text => {\n            templateEingabeelement(text)\n        })\n    }\n\n    // INIT\n    init();\n\n});"]}]},{"name":"Statistik","fragen":[{"frage":"Schreibe ein Programm, das eine Million zufällige Zahlen erzeugt.\nIn einer Map sollen diese für eine Statistik über die zufälligen Zahlen geführt werden. Der Schlüssel soll die zufällig erzeugte Zahl sein, der Wert soll die Anzahl sein, wie oft diese Zahl erzeugt wurde.","typ":"praxis","schwierigkeit":0,"antworten":["// FUNKTIONEN\nlet zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nlet zahlen = new Map();\nfor (let i = 1; i <= 100; i++) {\n    zahlen.set(i, 0);\n}\n\nfor (let i = 0; i < 1e6; i++) {\n    let z = zufallErzeugen(1, 100);\n    zahlen.set(z, zahlen.get(z) + 1);\n}\n\nconsole.log( zahlen );"]},{"frage":"Die Map soll nach Schlüssel sortiert ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":["// FUNKTIONEN\nlet zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nlet zahlen = new Map();\nfor (let i = 1; i <= 100; i++) {\n    zahlen.set(i, 0);\n}\n\nfor (let i = 0; i < 1e6; i++) {\n    let z = zufallErzeugen(1, 100);\n    zahlen.set(z, zahlen.get(z) + 1);\n}\n\nzahlen.forEach((el, i) => {\n    let neu = document.createElement('div');\n    neu.innerHTML = `${i}: ${el}`;\n    document.body.append(neu);\n});"]},{"frage":"Zeichne ein Balkendiagramm auf Basis von DIV-Containern. ","typ":"praxis","schwierigkeit":0,"antworten":["Das kriegst Du selbst hin"]}]}]},{"name":"DOM","parts":[{"name":"Basics","fragen":[{"frage":"Erstelle mit HTML-Code (nicht per JS!) eine Webseite mit einem DIV-Container mit der Klasse \"inhalt\".\nDieser DIV-Container soll vier p-Tags enthalten.\nDiese P-Tags sollen abwechselnd die Klassen \"hallo\", \"welt\", \"hallo\" und \"mond\" enthalten.\nFülle die P-Tags mit Fülltexten Deiner Wahl.\nÜber allem soll ein H1-Tag mit der Überschrift \"Meine Webseite\" stehen ","typ":"praxis","schwierigkeit":0,"antworten":["&lt;h1>\n Meine Webseite\n&lt;/h1>\n&lt;div class=\"inhalt\">\n &lt;p class=\"hallo\">\n  Zwei flinke Boxer jagen die quirlige Eva und ihren Mops durch Sylt.\n &lt;/p>\n &lt;p class=\"welt\">\n  Franz jagt im komplett verwahrlosten Taxi quer durch Bayern.\n &lt;/p>\n &lt;p class=\"hallo\">\n  Zwölf Boxkämpfer jagen Viktor quer über den großen Sylter Deich.\n &lt;/p>\n &lt;p class=\"mond\">\n  Vogel Quax zwickt Johnys Pferd Bim. Sylvia wagt quick den Jux bei Pforzheim.\n &lt;/p>\n&lt;/div>"]},{"frage":"Gib in der Konsole den Inhalt der Überschrift aus.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let ueberschrift = document.querySelector('h1');\n console.log(ueberschrift.innerText);\n});"]},{"frage":"Gib in der Konsole die Inhalte aller P-Tags aus","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\nlet pTags = Array.from(document.querySelectorAll('p'));\n for (let p of pTags) {\n  console.log(p.innerText);\n }\n});"]},{"frage":"Gib in der Konsole die Inhalte aller P-Tags mit der Klasse \"hallo\" aus.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let pTags = Array.from(document.querySelectorAll('p.hallo'));\n for (let p of pTags) {\n  console.log(p.innerText);\n }\n});"]},{"frage":"Alle Container mit der Klasse \"welt\" sollen zusätzlich die Klasse \"highlight\" zugewiesen bekommen.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let pTags = Array.from(document.querySelectorAll('.welt'));\n for (let p of pTags) {\n  p.classList.add('highlight');\n }\n});"]},{"frage":"Alle P-Tags mit der Klasse Welt soll alle Klassen entfernt bekommen.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let pTags = Array.from(document.querySelectorAll('.welt'));\n for (let p of pTags) {\n  p.className='';\n }\n});","document.addEventListener(\"DOMContentLoaded\", evt => {\n let pTags = Array.from(document.querySelectorAll('.welt'));\n for (let p of pTags) {\n  p.removeAttribute('class');\n }\n});"]}]},{"name":"Eventlistener","fragen":[{"frage":"Benutze die Webseite aus der vorigen Aufgabe.\nJedes Element, das angeklickt wurde, soll mit einem roten Rahmen hervorgehoben werden.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let all = Array.from(document.querySelectorAll('h1, p'));\n for (let el of all) {\n  el.addEventListener('click', evt => {\n   el.classList.add('rahmen')\n  })\n }\n});","document.addEventListener(\"DOMContentLoaded\", evt => {\n let all = Array.from(document.querySelectorAll('*'));\n for (let el of all) {\n  el.addEventListener('click', evt => {\n   // Bubbling unterdrücken\n   evt.stopPropagation();\n   el.classList.add('rahmen')\n  })\n }\n});"]},{"frage":"Jedes Element, das angeklickt wurde, soll mit einem zufälligen neuen Text gefüllt werden.","typ":"praxis","schwierigkeit":0,"antworten":["let texte = [\n 'Zwei flinke Boxer jagen die quirlige Eva und ihren Mops durch Sylt.',\n 'Franz jagt im komplett verwahrlosten Taxi quer durch Bayern.',\n 'Zwölf Boxkämpfer jagen Viktor quer über den großen Sylter Deich.',\n 'Vogel Quax zwickt Johnys Pferd Bim. Sylvia wagt quick den Jux bei Pforzheim.',\n 'Polyfon zwitschernd aßen Mäxchens Vögel Rüben, Joghurt und Quark.',\n '\"Fix, Schwyz! \" quäkt Jürgen blöd vom Paß.',\n 'Victor jagt zwölf Boxkämpfer quer über den großen Sylter Deich.',\n 'Falsches Üben von Xylophonmusik quält jeden größeren Zwerg.',\n 'Heizölrückstoßabdämpfung.'\n]\nconst zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\ndocument.addEventListener(\"DOMContentLoaded\", evt => {\n let all = Array.from(document.querySelectorAll('h1, p'));\n for (let el of all) {\n  el.addEventListener('click', evt => {   \n   el.innerHTML = texte[zufallErzeugen(0,texte.length-1)];\n  })\n }\n});"]},{"frage":"Ein Element, das angeklickt wurde, soll markiert werden.\nWenn ein zweites Element angeklickt wird, sollen diese beiden Elemente ihren Inhalt tauschen.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let all = Array.from(document.querySelectorAll('p'));\n\n for (let el of all) {\n  el.addEventListener('click', evt => {\n   let selected = document.querySelectorAll('.marked');\n   if (selected.length) {\n    let temp = el.innerHTML;\n    el.innerHTML = selected[0].innerHTML;\n    selected[0].innerHTML = temp;\n    for ( let sel of selected){\n     sel.classList.remove('marked');\n    }\n   } else {\n    el.classList.add('marked');\n   }\n  })\n }\n});","let selected = false;\n\nconst handleClick = evt => {\n let el = evt.target;\n if (selected) {\n  // el ist das aktuell angeklickte Element\n  // selected ist das zuvor angeklickte Element\n  let temp = selected.innerHTML;\n  selected.innerHTML = el.innerHTML;\n  el.innerHTML = temp;\n\n  selected.classList.remove('highlight');\n  selected = false;\n } else {\n  el.classList.add('highlight');\n  selected = el;\n }\n}\nconst init = () => {\n\n let elemente = Array.from(document.querySelectorAll('p, h1, h2, h3, h4, h5, h6, pre'));\n for(let el of elemente){\n  el.addEventListener('click', handleClick)\n }\n}\ndocument.addEventListener(\"DOMContentLoaded\", init);"]}]},{"name":"Styling","fragen":[{"frage":"Lege mit Javascript eine Tabelle mit 10 * 10 Feldern an.\nJedes der Felder soll eine individuelle Farbe erhalten.","typ":"praxis","schwierigkeit":0,"antworten":["const createNumber = (min, max) => ~~(Math.random() * (max-min+1) + min)\nconst createColor = () => `hsl(${createNumber(0,360)},60%,60%)`;\n\ndocument.addEventListener(\"DOMContentLoaded\", evt => {\n let felder = document.querySelectorAll('td');\n for(let feld of felder){                \n  feld.style.backgroundColor = createColor();\n }\n});"]},{"frage":"Sobald eines der Felder angeklickt wird, soll es seine Farbe ändern.","typ":"praxis","schwierigkeit":0,"antworten":["const createNumber = (min, max) => ~~(Math.random() * (max - min + 1) + min)\nconst createColor = () => `hsl(${createNumber(0, 360)},60%,60%)`;\nconst giveBG = el => el.style.backgroundColor = createColor();\n\ndocument.addEventListener(\"DOMContentLoaded\", evt => {\n let felder = document.querySelectorAll('td');\n for (let feld of felder) {\n  giveBG(feld);\n  feld.addEventListener('click', () => giveBG(feld));\n }\n});"]}]},{"name":"Elemente Organisieren","fragen":[{"frage":"Lege per Javascript ein neues DOM-Element an. Es soll als Inhalt den String 'Hallo welt' enthalten.\nDas Element soll die Klasse 'inhalt' enthalten und im document.body eingehängt werden.","typ":"praxis","schwierigkeit":0,"antworten":["let inhalt = `\n    &lt;div class=\"inhalt\"&gt;\n        Hallo Welt\n    &lt;/div&gt;\n`;\ndocument.body.innerHTML += inhalt;","let inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\n\ndocument.body.append(inhalt);"]},{"frage":"Erzeuge ein weiteres DOM-Element mit der ID 'ausgabe', in welches das Element aus der vorigen Aufgabe eingehängt wird.","typ":"praxis","schwierigkeit":0,"antworten":["let inhalt = `\n    &lt;div id=\"ausgabe\"&gt;\n        &lt;div class=\"inhalt\"&gt;\n            Hallo Welt\n        &lt;/div&gt;\n    &lt;/div&gt;\n`;\ndocument.body.innerHTML += inhalt;","let ausgabe = document.createElement('div');\nausgabe.id = 'ausgabe';\ndocument.body.append(ausgabe);\n\nlet inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\nausgabe.append(inhalt);"]},{"frage":"Lege ein weiteres DOM-Element mit der ID 'content' an. \nVerschiebe alle Elemente aus der ID 'ausgabe' in die ID 'content'.\n","typ":"praxis","schwierigkeit":0,"antworten":["\nlet ausgabe = document.createElement('div');\nausgabe.id = 'ausgabe';\ndocument.body.append(ausgabe);\n\nlet inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\nausgabe.append(inhalt);\n\nlet content = document.createElement('div');\ndocument.body.append(content);\ncontent.id = 'content';\n\n[...ausgabe.children].forEach(el => content.append(el))"]},{"frage":"Entferne das Element mit der ID 'ausgabe'","typ":"praxis","schwierigkeit":0,"antworten":["let ausgabe = document.createElement('div');\nausgabe.id = 'ausgabe';\ndocument.body.append(ausgabe);\n\nlet inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\nausgabe.append(inhalt);\n\nlet content = document.createElement('div');\ndocument.body.append(content);\ncontent.id = 'content';\n\n[...ausgabe.children].forEach(el => content.append(el))\n\nausgabe.remove();"]}]},{"name":"Inhalte ausgeben","fragen":[{"frage":"Lege ein Array mit 20 zufälligen Zahlen an.\nErzeuge für jedes Attribut aus dem Array einen p-Tag.","typ":"praxis","schwierigkeit":0,"antworten":["// VARIABLEN\nlet a = [...new Array(20)].map(() => ~~(Math.random() * 100));\n\n// FUNKTIONEN\nconst createDOMElement = (inhalt, typ = 'div', eltern = document.body) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nconst init = () => {\n    a.forEach(el => createDOMElement(el));\n}\n\n// INIT\ninit();"]},{"frage":"Gib allen p-Tags, deren Inhalt größer ist als 50, die Klasse 'rot'.","typ":"praxis","schwierigkeit":0,"antworten":["// VARIABLEN\nlet a = [...new Array(20)].map(() => ~~(Math.random() * 100));\n\n// FUNKTIONEN\n// Named Attributes\nconst createDOMElement = ({\n    inhalt,\n    typ = 'p',\n    eltern = document.body,\n    klassen = []\n}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    if (klassen.length) neu.className = klassen.join(' ');\n    eltern.append(neu);\n}\n\nconst init = () => {\n    a.forEach(el => {\n        if (el > 50) createDOMElement({ inhalt: el, klassen: ['rot'] });\n        else createDOMElement({ inhalt: el });\n    });\n}\n\n// INIT\ninit();"]},{"frage":"Erzeuge ein weiteres DOM-Element, in welchem die Anzahl der p-Tags angezeigt wird.","typ":"praxis","schwierigkeit":0,"antworten":["// VARIABLEN\nlet a = [...new Array(20)].map(() => ~~(Math.random() * 100));\n\n// FUNKTIONEN\n// Named Attributes\nconst createDOMElement = ({\n    inhalt,\n    typ = 'p',\n    eltern = document.body,\n    klassen = []\n}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    if (klassen.length) neu.className = klassen.join(' ');\n    eltern.append(neu);\n}\n\nconst init = () => {\n    a.forEach(el => {\n        if (el > 50) createDOMElement({ inhalt: el, klassen: ['zahl', 'rot'] });\n        else createDOMElement({ inhalt: el, klassen: ['zahl'] });\n    });\n    createDOMElement({\n        inhalt: `Anzahl: ${[...document.querySelectorAll('.zahl')].length}`,\n        klassen:['anzahl']\n    })\n}\n\n// INIT\ninit();"]}]},{"name":"Erzeugen bei Click","fragen":[{"frage":"Lege einen Button an.\nWenn der Button gedrückt wird, soll ein neues DOM-Element angelegt werden.","typ":"praxis","schwierigkeit":0,"antworten":["// FUNKTIONEN\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    typ = 'div',\n    eltern = document.body,\n} = {}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    eltern.append(neu);\n    return neu;\n}\n\nconst init = () => {\n    btnNext.addEventListener('click', () => {\n        DOMElementAnlegen({\n            inhalt: ~~(Math.random() * 100),\n        })\n    })\n}\n\n// INIT\ninit();"]},{"frage":"Das neu erzeugte DOM-Element soll automatisch nach zwei Sekunden verschwinden.","typ":"praxis","schwierigkeit":0,"antworten":["// FUNKTIONEN\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    typ = 'div',\n    eltern = document.body,\n} = {}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    eltern.append(neu);\n    return neu;\n}\n\nconst init = () => {\n    btnNext.addEventListener('click', () => {\n        let element = DOMElementAnlegen({\n            inhalt: ~~(Math.random() * 100),\n        })\n        setTimeout(\n            () => element.remove(),\n            2000\n        )\n    })\n}\n\n// INIT\ninit();"]}]},{"name":"Andere Eventlistener","fragen":[{"frage":"Baue eine Webseite mit viel Inhalt. Es muss genug Inhalt enthalten, um scrollen zu können.\nWenn der Benutzer scrollt, soll in der Konsole die aktuelle Scrollposition angezeigt werden.","typ":"praxis","schwierigkeit":0,"antworten":["window.addEventListener('scroll', evt => {\n console.clear();\n console.log('docEl: ', document.documentElement.scrollTop);\n})"]},{"frage":"Die Scrollposition soll in einem dafür vorgesehenen DOM-Container angezeigt werden.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n const scrollPos = document.createElement('div');\n scrollPos.classList.add('fixedRightTop');\n scrollPos.innerHTML = '0';\n document.body.append(scrollPos);\n window.addEventListener('scroll', evt => {\n  scrollPos.innerHTML = document.documentElement.scrollTop;\n })\n});"]},{"frage":"Sobald die Größe des Fensters verändert wird, soll die veränderte Größe in globale Variablen gespeichert werden.\nDiese Variablen sollen in der Konsole ausgegeben werden","typ":"praxis","schwierigkeit":0,"antworten":["let w = window.innerWidth, h = window.innerHeight;\nconst resize = () => {\n const scrollPos = document.querySelector('.fixedRightTop');\n w = window.innerWidth;\n h = window.innerHeight;\n scrollPos.innerHTML = `${w}, ${h}`\n}\nwindow.addEventListener('resize', resize);\ndocument.addEventListener(\"DOMContentLoaded\", evt => {\n const scrollPos = document.createElement('div');\n scrollPos.classList.add('fixedRightTop');\n scrollPos.innerHTML = '0';\n document.body.append(scrollPos);\n});"]}]},{"name":"Formularaufgaben","fragen":[{"frage":"Lege eine Webseite an, in der ein Formular angezeigt wird.\nDieses Formular soll ein paar Eingabetextfelder und einen Button enthalten.","typ":"praxis","schwierigkeit":0,"antworten":["<form>\n <p>\n  Eingabe 1: <input type=\"text\" name=\"eingabe1\" placeholder=\"Textinhalt\" />\n </p>\n <p>\n  Eingabe 2: <input type=\"text\" name=\"eingabe2\" placeholder=\"Textinhalt\" />\n </p>\n <p>\n  Eingabe 3: <input type=\"text\" name=\"eingabe3\" placeholder=\"Textinhalt\" />\n </p>\n <button>\n  Absenden\n </button>\n</form>"]},{"frage":"Wenn eines der Texteingabefelder angeklickt wird, soll der Inhalt entfernt werden und der Fokus soll auf dieses Element gesetzt werden.","typ":"praxis","schwierigkeit":0,"antworten":["let inputs = Array.from(document.querySelectorAll('input[type=\"text\"]'));\n\nconst handleClick = evt => {\n evt.target.value = '';\n evt.target.focus();\n}\n\nconst init = () => {\n for (let input of inputs) {\n  input.addEventListener('click', handleClick);\n }\n}\n\ninit();"]},{"frage":"Wenn ein Eingabefeld verändert wurde, soll der aktuelle Inhalt des Eingabefeldes in die Konsole geschrieben werden.","typ":"praxis","schwierigkeit":0,"antworten":["let inputs = Array.from(document.querySelectorAll('input[type=\"text\"]'));\n\nconst handleClick = evt => {\n console.clear();\n console.log('Element: ', evt.target);\n console.log('Wert: ', evt.target.value);\n}\n\nconst init = () => {\n for (let input of inputs) {\n  input.addEventListener('input', handleClick);\n }\n}\n\ninit();"]},{"frage":"Wenn der Button gedrückt wird, sollen die Inhalte aller Textelemente in der Konsole ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Das Formularelement soll einen Button enthalten, der ein weiteres Text-Eingabefeld erzeugt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Lege ein Array an mit zehn Vornamen.\nLass per JS ein neues Select-Element im Formular anlegen. Dieses soll mit option-Elementen gefüllt werden, welche die Namen aus dem Array enthalten. Wenn sich die Auswahl ändert, soll die neue Auswahl in der Konsole ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Error","fragen":[{"frage":"Lege eine Webseite mit mehreren Bildern an.\nFür jedes Bild, das nicht geladen werden konnte, soll statt dessen ein Standard-Bild angezeigt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Für jedes Bild, das nicht geladen werden konnte, soll statt dessen ein DOM-Element angezeigt werden. \nDieses Element soll einen Text enthalten, der beschreibt, welches Bild nicht geladen werden konnte.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Canvas","parts":[{"name":"Kästen","fragen":[{"frage":"Zeichne einen Kasten im Canvas.\nDieser Kasten soll halb so hoch und halb so breit wie der Canvas sein. \nDer Kasten soll horizontal und vertikal zentriert sein.\nDer Kasten soll mit einem Blaugrau gefüllt sein.","typ":"praxis","schwierigkeit":0,"antworten":["let c = document.querySelector('canvas');\nlet ctx = c.getContext('2d');\n\nctx.fillStyle = '#abc';\nctx.fillRect(c.width / 4, c.height / 4, c.width / 2, c.height / 2)"]},{"frage":"Verteile auf dem Canvas 100 quadratische Kästen mit zufälliger Positionierung.","typ":"praxis","schwierigkeit":0,"antworten":["let c = document.querySelector('canvas');\nlet ctx = c.getContext('2d');\nlet size = 30;\n\nconst zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nfor (let i = 0; i < 100; i++) {\n ctx.fillStyle = `hsl(${zufall(0,360)},100%,50%)`;\n ctx.fillRect(\n  zufall(0, c.width - size),\n  zufall(0, c.height - size),\n  size, size\n )\n}"]},{"frage":"Zeichne jede Sekunde 1000 zufällige Quadrate auf einem leeren Canvas.","typ":"praxis","schwierigkeit":0,"antworten":["let c = document.querySelector('canvas');\nlet ctx = c.getContext('2d');\nlet size = 30;\n\nconst zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nconst zeichne = () => {\n ctx.clearRect(0, 0, c.width, c.height);\n for (let i = 0; i < 1000; i++) {\n  ctx.fillStyle = `hsl(${zufall(0, 360)},100%,50%)`;\n  ctx.fillRect(\n   zufall(0, c.width - size),\n   zufall(0, c.height - size),\n   size, size\n  )\n }\n}\n\nconst init = () => {\n setInterval(zeichne, 1000);\n zeichne();\n}\n\ninit();"]},{"frage":"Lege einen Canvas an.\nWenn sich die Maus über den Canvas bewegt, soll eine Linie der Maus folgend gezeichnet werden.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let size = 30;\n\n const zeichne = evt => {\n  ctx.beginPath();\n  ctx.arc(evt.layerX, evt.layerY, size / 2, 0, 2*Math.PI);\n  ctx.fill();\n }\n\n c.addEventListener('mousemove', zeichne);\n});","document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let lastPos = false;\n\n const zeichne = evt => {\n  if (lastPos) {\n   ctx.beginPath();\n   ctx.moveTo(lastPos.x, lastPos.y);\n   ctx.lineTo(evt.layerX, evt.layerY);\n   ctx.stroke();\n  }\n  lastPos = { x: evt.layerX, y: evt.layerY };\n }\n\n c.addEventListener('mousemove', zeichne);\n\n});"]},{"frage":"Wie oben, aber der Kasten soll nur gezeichnet werden, wenn die Maustaste gesrückt ist.\nDie Seite soll ein Eingabefeld für die Zeichenfarbe haben.\nAußerdem soll ein Eingabefeld die Strichstärke bestimmen.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n \n let c = document.querySelector('canvas');\n let inputColor = document.querySelector('#inputColor');\n let inputSize = document.querySelector('#inputSize');\n \n let ctx = c.getContext('2d');\n let lastPos = false;\n let pressed = false;\n let color = inputColor.value;\n let size = Number(inputSize.value);\n \n const zeichne = evt => {\n  ctx.strokeStyle = color;\n  ctx.lineWidth = size;\n \n  if (lastPos && pressed) {\n   ctx.beginPath();\n   ctx.moveTo(lastPos.x, lastPos.y);\n   ctx.lineTo(evt.layerX, evt.layerY);\n   ctx.stroke();\n  }\n  lastPos = { x: evt.layerX, y: evt.layerY };\n }\n \n const btnDown = () => pressed = true;\n const btnUp = () => pressed = false;\n \n const changeSize = evt => size = Number(evt.target.value);\n const changeColor = evt => color = evt.target.value;\n \n c.addEventListener('mousemove', zeichne);\n c.addEventListener('mousedown', btnDown);\n c.addEventListener('mouseup', btnUp);\n inputColor.addEventListener('change', changeColor);\n inputSize.addEventListener('change', changeSize);\n\n});"]}]},{"name":"Schachbrett","fragen":[{"frage":"Zeichne ein quadratisches Canvas.\nZeichne auf dem Canvas ein Schachbrettmuster, so dass alle Felder 20px breit und ebenso hoch sind.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let size = 20;\n \n ctx.fillStyle = '#aaa'\n for (let i = 0; i <= c.width; i += size) {\n  for (let j = 0; j <= c.height; j += size) {\n   let evenI = !((i / size) % 2), evenJ = !((j / size) % 2);\n   if (evenI == evenJ) {\n    ctx.fillRect(i, j, size, size);\n   }\n  }\n }\n});","document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let size = 20;\n\n for (let i = 0; i <= c.width; i += size) {\n  for (let j = 0; j <= c.height; j += size) {\n   let evenI = !((i / size) % 2), evenJ = !((j / size) % 2);\n   if (evenI == evenJ) {\n    ctx.fillStyle = 'hsl(50,50%,70%)'\n   }else {\n    ctx.fillStyle = 'hsl(0,50%,70%)'\n   }\n   ctx.fillRect(i, j, size, size);\n  }\n }\n});"]},{"frage":"Wie oben, aber das Schachbrett soll horizontal wie vertikal 8 Felder groß sein.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let size = c.width / 8;\n\n for (let i = 0; i <= c.width; i += size) {\n  for (let j = 0; j <= c.height; j += size) {\n   let evenI = !((i / size) % 2), evenJ = !((j / size) % 2);\n   if (evenI == evenJ) {\n    ctx.fillStyle = 'hsl(50,50%,70%)'\n   }else {\n    ctx.fillStyle = 'hsl(0,50%,70%)'\n   }\n   ctx.fillRect(i, j, size, size);\n  }\n }\n});"]}]},{"name":"Kurven","fragen":[{"frage":"Zeichne auf dem Canvas eine grüne Sinuskurve.\nDie Kurve soll auf einem Koordinatenkreuz liegen.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let padding = 20, step = 45;\n let amp = 180;\n\n // FUNKTIONEN\n const bogenmass = winkel => winkel / 180 * Math.PI;\n\n const zeichne = () => {\n  // Koordinaten\n  ctx.strokeStyle = '#888';\n  ctx.beginPath();\n  ctx.moveTo(padding, padding);\n  ctx.lineTo(padding, c.height - padding);\n\n  ctx.moveTo(padding, c.height / 2);                \n  ctx.lineTo(c.width - padding, c.height / 2);\n                \n  ctx.stroke();\n\n  // Kurve\n  ctx.strokeStyle = '#080';\n  ctx.beginPath();\n  ctx.moveTo(padding, c.height / 2);\n\n  for (let i = padding; i < (c.width - padding); i++) {\n   ctx.lineTo(\n    i,\n    (c.height/2) - (Math.sin(bogenmass(i - padding)) * amp)\n   )\n  }\n  ctx.stroke();\n }\n\n const init = () => {\n  zeichne();\n }\n\n // INIT\n init();\n\n});"]},{"frage":"Schreibe eine Skala auf die Achsen, welche die Gradzahlen in 45er-Schritten darstellt.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let padding = 20, step = 45;\n let amp = 180;\n\n // FUNKTIONEN\n const bogenmass = winkel => winkel / 180 * Math.PI;\n\n const zeichne = () => {\n  // Koordinaten\n  ctx.strokeStyle = '#888';\n  ctx.beginPath();\n  ctx.moveTo(padding, padding);\n  ctx.lineTo(padding, c.height - padding);\n\n  ctx.moveTo(padding, c.height / 2);\n  for (\n   let i = padding + step;\n   i < (c.width - padding);\n   i = Math.min(c.width - padding, i + step)\n  ) {\n   ctx.lineTo(i, c.height / 2);\n   ctx.lineTo(i, (c.height / 2) + 10);\n   ctx.lineTo(i, c.height / 2);\n   ctx.fillText(`${i - padding}°`, i, c.height / 2 + padding);\n   ctx.moveTo(i, c.height / 2);\n  }\n  ctx.stroke();\n\n  // Kurve\n  ctx.strokeStyle = '#080';\n  ctx.beginPath();\n  ctx.moveTo(padding, c.height / 2);\n\n  for (let i = padding; i < (c.width - padding); i++) {\n   ctx.lineTo( i, (c.height/2) - (Math.sin(bogenmass(i - padding)) * amp) );\n  }\n  ctx.stroke();\n }\n\n const init = () => {\n  zeichne();\n }\n\n // INIT\n init();\n\n});"]},{"frage":"Überlagere die Sinuskurve mit einem Rauschen.\nDas Rauschen soll animiert sein.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let padding = 20, step = 45;\n let amp = 180;\n let noise = 3;\n\n // FUNKTIONEN\n const bogenmass = winkel => winkel / 180 * Math.PI;\n const zufall = (min, max) => Math.random() * (max - min + 1) + min;\n\n const zeichne = () => {\n  ctx.clearRect(0, 0, c.width, c.height);\n\n  // Koordinaten\n  ctx.strokeStyle = '#888';\n  ctx.beginPath();\n  ctx.moveTo(padding, padding);\n  ctx.lineTo(padding, c.height - padding);\n\n  ctx.moveTo(padding, c.height / 2);\n  for (\n   let i = padding + step;\n   i < (c.width - padding);\n   i = Math.min(c.width - padding, i + step)\n  ) {\n   ctx.lineTo(i, c.height / 2);\n   ctx.lineTo(i, (c.height / 2) + 10);\n   ctx.lineTo(i, c.height / 2);\n\n   ctx.fillText(`${i - padding}°`, i, c.height / 2 + padding);\n   ctx.moveTo(i, c.height / 2);\n  }\n  ctx.stroke();\n\n  // Kurve\n  ctx.strokeStyle = '#080';\n  ctx.beginPath();\n  ctx.moveTo(padding, c.height / 2);\n\n  for (let i = padding; i < (c.width - padding); i++) {\n   ctx.lineTo(\n    i,\n    (c.height / 2) - (Math.sin(bogenmass(i - padding)) * amp) + zufall(-noise, noise)\n   )\n  }\n  ctx.stroke();\n }\n\n const init = () => {\n  setInterval(zeichne,30);\n }\n\n // INIT\n init();\n});"]}]},{"name":"Schnee","fragen":[{"frage":"Lass es auf dem Canvas schneien.\nBenutze dazu das Bild schnee.png auf dem Datenaustausch.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let img = new Image();\n            img.src = \"bilder/schnee.png\";\n\n            let anzahl = 100;\n            let size = 40;\n            let fallen = 3;\n            let flocken = [...new Array(anzahl)];\n\n            // FUNKTIONEN\n            const bogenmass = winkel => winkel / 180 * Math.PI;\n            const zufall = (min, max, dez = false) => {\n                let z = Math.random() * (max - min + 1) + min;\n                z = dez ? z : ~~z;\n                return z;\n            }\n\n            const zeichne = () => {\n                ctx.clearRect(0, 0, c.width, c.height);\n                // for-Schleife, weil performanter\n                for (let i = 0; i < flocken.length; i++) {\n                    let flocke = flocken[i];\n                    ctx.drawImage(img, flocke.x, flocke.y, size, size);\n                    flocke.y += fallen;\n                    if ( flocke.y > c.height ) flocke.y = -size;\n                }\n            }\n\n            const init = () => {\n                document.body.append(img);\n                flocken = flocken.map(() => {\n                    return {\n                        x: zufall(0, c.width - size),\n                        y: zufall(0, c.height - size),\n                    }\n                })\n                setInterval(zeichne, 30);\n            }\n\n            // INIT\n            img.addEventListener('load', init);\n        });"]},{"frage":"Jede Schneeflocke soll mit einer individuellen Geschwindigkeit fallen und mit einer individuellen Geschwindigkeit seitwärts abgelenkt werden.","typ":"praxis","schwierigkeit":0,"antworten":[" document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let img = new Image();\n            img.src = \"bilder/schnee.png\";\n\n            let anzahl = 100;\n            let size = 40;\n            let flocken = [...new Array(anzahl)];\n\n            // FUNKTIONEN\n            const bogenmass = winkel => winkel / 180 * Math.PI;\n            const zufall = (min, max, dez = false) => {\n                let z = Math.random() * (max - min + 1) + min;\n                z = dez ? z : ~~z;\n                return z;\n            }\n\n            const zeichne = () => {\n                ctx.clearRect(0, 0, c.width, c.height);\n                // for-Schleife, weil performanter\n                for (let i = 0; i < flocken.length; i++) {\n                    let flocke = flocken[i];\n                    ctx.drawImage(img, flocke.x, flocke.y, size, size);\n                    flocke.x += flocke.vx;\n                    flocke.y += flocke.vy;\n                    if ( flocke.y > c.height ) flocke.y = -size;\n                    if ( flocke.x > c.width ) flocke.x = -size;\n                    if ( flocke.x < -size ) flocke.x = c.width;\n                }\n            }\n\n            const init = () => {\n                document.body.append(img);\n                flocken = flocken.map(() => {\n                    return {\n                        x: zufall(0, c.width - size),\n                        y: zufall(0, c.height - size),\n                        vx: zufall(-1, 1, true),\n                        vy: zufall(1, 5, true),\n                    }\n                })\n                setInterval(zeichne, 30);\n            }\n\n            // INIT\n            img.addEventListener('load', init);\n        });"]},{"frage":"Jede Schneeflocke soll eine zufällige Größe haben.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n let c = document.querySelector('canvas');\n let ctx = c.getContext('2d');\n let img = new Image();\n img.src = \"bilder/schnee.png\";\n\n let anzahl = 100;\n let size = 30;\n let flocken = [...new Array(anzahl)];\n\n // FUNKTIONEN\n const bogenmass = winkel => winkel / 180 * Math.PI;\n const zufall = (min, max, dez = false) => {\n  let z = Math.random() * (max - min + 1) + min;\n  z = dez ? z : ~~z;\n  return z;\n }\n\n const zeichne = () => {\n  ctx.clearRect(0, 0, c.width, c.height);\n  // for-Schleife, weil performanter\n  for (let i = 0; i < flocken.length; i++) {\n   let flocke = flocken[i];\n   ctx.globalAlpha = flocke.size;\n   ctx.drawImage(img, flocke.x, flocke.y, size * flocke.size, size * flocke.size);\n   flocke.x += flocke.vx;\n   flocke.y += flocke.vy;\n   if ( flocke.y > c.height ) flocke.y = -size;\n   if ( flocke.x > c.width ) flocke.x = -size;\n   if ( flocke.x < -size ) flocke.x = c.width;\n  }\n }\n\n const init = () => {\n  document.body.append(img);\n  flocken = flocken.map(() => {\n   return {\n    x: zufall(0, c.width - size),\n    y: zufall(0, c.height - size),\n    size: zufall(.5, 1, true),\n    vx: zufall(-1, 1, true),\n    vy: zufall(1, 5, true),\n   }\n  })\n  setInterval(zeichne, 30);\n }\n\n // INIT\n img.addEventListener('load', init);\n});"]},{"frage":"Für jede Schneeflocke soll ein zufälliger Ausschnitt aus dem Spritesheet schnee_sprite.png genommen werden.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let img = new Image();\n            img.src = \"bilder/schnee_sprite.png\";\n\n            let ausschnitt = 65;\n            let anzahlAusschnitte = 9;\n            let anzahl = 100;\n            let size = 40;\n            let flocken = [...new Array(anzahl)];\n\n            // FUNKTIONEN\n            const bogenmass = winkel => winkel / 180 * Math.PI;\n            const zufall = (min, max, dez = false) => {\n                let z = Math.random() * (max - min + 1) + min;\n                z = dez ? z : ~~z;\n                return z;\n            }\n\n            const zeichne = () => {\n                ctx.clearRect(0, 0, c.width, c.height);\n                // for-Schleife, weil performanter\n                for (let i = 0; i < flocken.length; i++) {\n                    let flocke = flocken[i];\n                    ctx.drawImage(\n                        img,\n                        ausschnitt * flocke.ausschnitt,\n                        0,\n                        ausschnitt,\n                        ausschnitt,\n                        flocke.x,\n                        flocke.y,\n                        size*flocke.size,\n                        size*flocke.size\n                    );\n                    flocke.x += flocke.vx;\n                    flocke.y += flocke.vy;\n                    if (flocke.y > c.height) flocke.y = -size;\n                    if (flocke.x > c.width) flocke.x = -size;\n                    if (flocke.x < -size) flocke.x = c.width;\n                }\n            }\n\n            const init = () => {\n                document.body.append(img);\n                flocken = flocken.map(() => {\n                    return {\n                        x: zufall(0, c.width - size),\n                        y: zufall(0, c.height - size),\n                        vx: zufall(-1, 1, true),\n                        vy: zufall(1, 5, true),\n                        size: zufall(.5, 1, true),\n                        ausschnitt: zufall(0, anzahlAusschnitte - 1),\n                    }\n                })\n                setInterval(zeichne, 30);\n            }\n\n            // INIT\n            img.addEventListener('load', init);\n        });"]}]},{"name":"Knöpfe abprallen","fragen":[{"frage":"Zeichne auf dem Canvas das Bild 'knopf.png'. \nDieses Bild soll sich auf dem Canvas bewegen und von den Kanten abprallen.\nWährend der Bewegung soll sich der Knopf drehen.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let img = new Image();\n            img.src = \"bilder/knopf.png\";\n\n            let knopf = {\n                x: 100,\n                y: 100,\n                winkel: 0,\n                vx: 5,\n                vy: 4,\n                vWinkel: (5 / 180 * Math.PI),\n                size: 80,\n            }\n\n            const zeichne = () => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                ctx.translate(knopf.x, knopf.y);\n                ctx.rotate(knopf.winkel);\n                ctx.drawImage(img, -(knopf.size/2), -(knopf.size/2), knopf.size, knopf.size);\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n                knopf.winkel += knopf.vWinkel;\n                knopf.x += knopf.vx;\n                knopf.y += knopf.vy;\n\n                if (knopf.x > c.width - knopf.size || knopf.x < 0) knopf.vx *= -1;\n                if (knopf.y > c.height - knopf.size || knopf.y < 0) knopf.vy *= -1;\n            }\n\n            const init = () => {\n                setInterval(zeichne, 30);\n            }\n\n            // INIT\n            img.addEventListener('load', init);\n\n        });"]},{"frage":"Statt eines Knopfes, zeichne 50 Knöpfe.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let anzahl = 50;\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let img = new Image();\n            img.src = \"bilder/knopf.png\";\n            let maxSize = 80;\n\n            let knoepfe = [];\n\n            // FUNKTIONEN\n            const bm = winkel => winkel / 180 * Math.PI;\n            const zufallErzeugen = (min, max, dez = 0) => {\n                dez = 10 ** dez;\n                let z = Math.random() * (max - min + (1 / dez)) + min;\n                z = ~~(z * dez) / dez;\n                return z;\n            }\n\n\n            // KLASSEN\n            class Knopf {\n                constructor() {\n                    let z = Math.random() * .5 + .5;\n                    this.size = maxSize * z;\n                    this.x = zufallErzeugen(0, c.width - (maxSize * z));\n                    this.y = zufallErzeugen(0, c.width - (maxSize * z));\n                    this.winkel = bm(zufallErzeugen(0, 360));\n                    this.vx = zufallErzeugen(-5, 5);\n                    this.vy = zufallErzeugen(-5, 5);\n                    this.vWinkel = bm(zufallErzeugen(-5, 5));\n                }\n            }\n\n            const zeichne = () => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                knoepfe.forEach(knopf => {\n                    ctx.translate(knopf.x, knopf.y);\n                    ctx.rotate(knopf.winkel);\n                    ctx.drawImage(img, -(knopf.size / 2), -(knopf.size / 2), knopf.size, knopf.size);\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n                    knopf.winkel += knopf.vWinkel;\n                    knopf.x += knopf.vx;\n                    knopf.y += knopf.vy;\n\n                    let ks = knopf.size/2;\n                    if (knopf.x > c.width - ks || knopf.x < ks) knopf.vx *= -1;\n                    if (knopf.y > c.height - ks || knopf.y < ks) knopf.vy *= -1;\n                });\n            }\n\n            const init = () => {\n                for (let i = 0; i < anzahl; i++) {\n                    knoepfe.push(new Knopf());\n                }\n                setInterval(zeichne, 30);\n            }\n\n            // INIT\n            img.addEventListener('load', init);\n\n        });"]},{"frage":"Die Knöpfe sollen verschwinden, wenn sie angeklickt werden.","typ":"praxis","schwierigkeit":0,"antworten":[" document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let anzahl = 50;\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let img = new Image();\n            img.src = \"bilder/knopf.png\";\n            let maxSize = 80;\n\n            let knoepfe = [];\n\n            // FUNKTIONEN\n            const bm = winkel => winkel / 180 * Math.PI;\n            const zufallErzeugen = (min, max, dez = 0) => {\n                dez = 10 ** dez;\n                let z = Math.random() * (max - min + (1 / dez)) + min;\n                z = ~~(z * dez) / dez;\n                return z;\n            }\n\n\n            // KLASSEN\n            class Knopf {\n                constructor() {\n                    let z = Math.random() * .5 + .5;\n                    this.size = maxSize * z;\n                    this.x = zufallErzeugen(100, c.width - (maxSize * z) - 100);\n                    this.y = zufallErzeugen(100, c.width - (maxSize * z) - 100);\n                    this.winkel = bm(zufallErzeugen(0, 360));\n                    this.vx = zufallErzeugen(-5, 5, 2);\n                    this.vy = zufallErzeugen(-5, 5, 2);\n                    this.vWinkel = bm(zufallErzeugen(-5, 5));\n                }\n            }\n\n            const zeichne = () => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                knoepfe.forEach(knopf => {\n                    ctx.translate(knopf.x, knopf.y);\n                    ctx.rotate(knopf.winkel);\n                    ctx.drawImage(img, -(knopf.size / 2), -(knopf.size / 2), knopf.size, knopf.size);\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n                    knopf.winkel += knopf.vWinkel;\n\n                    knopf.x += knopf.vx;\n                    knopf.y += knopf.vy;\n\n                    let ks = knopf.size / 2;\n                    if (knopf.x > c.width - ks || knopf.x < ks) knopf.vx *= -1;\n                    if (knopf.y > c.height - ks || knopf.y < ks) knopf.vy *= -1;\n                });\n            }\n\n            const killClicked = evt => {\n                //console.log(evt.layerX, evt.layerY);\n                let knopf = knoepfe.find(knopf => {\n                    let x = knopf.x - evt.layerX;\n                    let y = knopf.y - evt.layerY;\n                    return (Math.sqrt((x ** 2) + (y ** 2))) < (knopf.size / 2);\n                })\n\n                if (knopf) knoepfe = knoepfe.filter(kn => kn != knopf);\n\n            }\n\n            const init = () => {\n                for (let i = 0; i < anzahl; i++) {\n                    knoepfe.push(new Knopf());\n                }\n                setInterval(zeichne, 30);\n            }\n\n            // EVENTLISTENER\n            c.addEventListener('click', killClicked);\n\n            // INIT\n            img.addEventListener('load', init);\n\n        });"]}]},{"name":"Diagramm","fragen":[{"frage":"Lege einen Array an und fülle ihn mit 20 Werten zwischen 10 und 5000.\nZeichne dann ins Canvas ein Balkendiagramm, welches die Werte darstellt.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let data = [];\n            let anzahl = 20;\n            let padding = 10;\n            let paddingInner = 2;\n\n            // FUNKTIONEN\n            const zufallErzeugen = (min, max, dez = 0) => {\n                dez = 10 ** dez;\n                let z = Math.random() * (max - min + (1 / dez)) + min;\n                z = ~~(z * dez) / dez;\n                return z;\n            }\n\n            // KLASSEN\n            const zeichne = data => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                let h = (c.height - (padding*2)) / data.length;\n                let max = Math.max(...data);\n                let min = Math.min(...data);\n\n                data.forEach((wert, i) => {\n                    ctx.fillRect(\n                        padding,\n                        (h * i) + padding,\n                        (c.width - (padding*2)) / max * wert,\n                        h - paddingInner\n                    )\n                })\n\n            }\n\n\n            const init = () => {\n                for (let i = 0; i < anzahl; i++) {\n                    data.push(zufallErzeugen(10, 5000))\n                }\n                zeichne(data);\n            }\n\n            init();\n\n        });"]},{"frage":"Die Füllfarbe soll für den höchsten Wert rot sein, für den niedrigsten grün und für alle anderen soll die Farbe dem Wert entsprechend zwischen rot und grün liegen. ","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let data = [];\n            let anzahl = 20;\n            let padding = 10;\n            let paddingInner = 2;\n\n            // FUNKTIONEN\n            const zufallErzeugen = (min, max, dez = 0) => {\n                dez = 10 ** dez;\n                let z = Math.random() * (max - min + (1 / dez)) + min;\n                z = ~~(z * dez) / dez;\n                return z;\n            }\n\n            // KLASSEN\n            const zeichne = data => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                let h = (c.height - (padding * 2)) / data.length;\n                let max = Math.max(...data);\n                let min = Math.min(...data);\n\n\n\n                data.forEach((wert, i) => {\n                    // let hue = 120 - ((wert - min) / (max - min)) * 120;\n                    \n                    // Alternativ mit Kurvenanpassung\n                    let hue = 120 - (((wert - min) / (max - min)) ** 3) * 120;\n\n                    ctx.fillStyle = `hsl(${hue},100%,50%)`;\n\n                    ctx.fillRect(\n                        padding,\n                        (h * i) + padding,\n                        (c.width - (padding * 2)) / max * wert,\n                        h - paddingInner\n                    )\n                })\n\n            }\n\n            const init = () => {\n                for (let i = 0; i < anzahl; i++) {\n                    data.push(zufallErzeugen(4000, 5000))\n                }\n                zeichne(data);\n            }\n\n            init();\n\n        });"]},{"frage":"Wenn die Maus auf einen der Balken rollt, soll der Wert dieses Balkens angezeigt werden.\nDer Balken soll hervorgehoben werden.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let data = [];\n            let anzahl = 20;\n            let padding = 10;\n            let paddingInner = 2;\n\n            // FUNKTIONEN\n            const zufallErzeugen = (min, max, dez = 0) => {\n                dez = 10 ** dez;\n                let z = Math.random() * (max - min + (1 / dez)) + min;\n                z = ~~(z * dez) / dez;\n                return z;\n            }\n\n            // KLASSEN\n            const zeichne = (data, mouseY = -1) => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                let h = (c.height - (padding * 2)) / data.length;\n                let max = Math.max(...data);\n                let min = Math.min(...data);\n                let activeValue = false;\n\n                data.forEach((wert, i) => {\n                    // Mausposition\n                    let tempH = (h * i) + padding;\n                    let hue = 120 - (((wert - min) / (max - min)) ** 3) * 120;\n                    if (mouseY > tempH && mouseY < tempH + h) {\n                        ctx.fillStyle = `hsl(${hue},100%,10%)`;\n                        activeValue = wert;\n                    } else {\n                        ctx.fillStyle = `hsl(${hue},100%,50%)`;\n                    }\n\n                    ctx.fillRect(\n                        padding,\n                        (h * i) + padding,\n                        (c.width - (padding * 2)) / max * wert,\n                        h - paddingInner\n                    )\n                })\n\n                if (activeValue) {\n                    ctx.fillStyle = '#000';\n                    ctx.strokeStyle = '#fff';\n\n                    ctx.textAlign = 'center';\n                    ctx.font = '200px arial';\n                    ctx.fillText(activeValue, c.width / 2, c.height / 2);\n                    ctx.strokeText(activeValue, c.width / 2, c.height / 2);\n                }\n            }\n\n            c.addEventListener('mousemove', evt => zeichne(data, evt.layerY));\n            c.addEventListener('mouseleave', evt => zeichne(data, -1));\n\n            const init = () => {\n                for (let i = 0; i < anzahl; i++) {\n                    data.push(zufallErzeugen(10, 5000))\n                }\n                zeichne(data);\n            }\n\n            init();\n\n        });"]},{"frage":"Statt eines Balkendiagramms zeichne ein Liniendiagramm.\nDie Datenpunkte sollen mit einem Kreis hervorgehoben werden.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let data = [];\n            let anzahl = 20;\n            let kreisradius = 8;\n\n            // FUNKTIONEN\n            const zufallErzeugen = (min, max, dez = 0) => {\n                dez = 10 ** dez;\n                let z = Math.random() * (max - min + (1 / dez)) + min;\n                z = ~~(z * dez) / dez;\n                return z;\n            }\n\n            // KLASSEN\n            const zeichne = data => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                let h = c.height / data.length;\n                let max = Math.max(...data);\n                let min = Math.min(...data);\n                let left = 0;\n                let top = 0;\n\n                data.forEach((wert, i) => {\n                    ctx.strokeStyle = '#000';\n                    ctx.beginPath();\n                    ctx.moveTo(left, top);\n                    left = (c.width / max * wert);\n                    top = (i * h) + (h / 2)\n                    if (i > 0) ctx.lineTo(left, top);\n                    ctx.moveTo(left + kreisradius, top);\n                    ctx.arc(left, top, kreisradius, 0, Math.PI * 2);\n                    ctx.stroke();\n\n                    ctx.fillStyle = '#800';\n                    ctx.font = '20px arial';\n                    ctx.fillText(wert, left + 20, top + 10);\n                })\n\n            }\n\n\n            const init = () => {\n                for (let i = 0; i < anzahl; i++) {\n                    data.push(zufallErzeugen(10, 5000))\n                }\n                zeichne(data);\n            }\n\n            init();\n\n        });"]},{"frage":"Statt des Liniendiagramms zeichne ein Tortendiagramm.","typ":"praxis","schwierigkeit":0,"antworten":["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n            let c = document.querySelector('canvas');\n            let ctx = c.getContext('2d');\n            let data = [];\n            let anzahl = 5;\n            let kreisradius = 8;\n\n            // FUNKTIONEN\n            const zufallErzeugen = (min, max, dez = 0) => {\n                dez = 10 ** dez;\n                let z = Math.random() * (max - min + (1 / dez)) + min;\n                z = ~~(z * dez) / dez;\n                return z;\n            }\n\n            const farbeErzeugen = () => `hsl(${zufallErzeugen(0, 360)},100%,50%)`;\n\n            // KLASSEN\n            const zeichne = data => {\n                ctx.clearRect(0, 0, c.width, c.height);\n\n                let gesamt = data.reduce((sum, wert) => sum + wert);\n                let radius = 350;\n                let winkel = 0;\n                let center = [c.width / 2, c.height / 2];\n\n                data.forEach((wert, i) => {\n                    ctx.fillStyle = farbeErzeugen();\n                    let anteil =  (360 / gesamt * wert) * (2 * Math.PI / 180);\n                    ctx.beginPath();\n                    ctx.moveTo(...center);\n                    ctx.arc(...center, radius, winkel, winkel + anteil);\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.stroke();\n                    winkel += anteil;\n                })\n\n            }\n\n\n            const init = () => {\n                for (let i = 0; i < anzahl; i++) {\n                    data.push(zufallErzeugen(10, 5000))\n                }\n                zeichne(data);\n            }\n\n            init();\n\n        });"]}]}]},{"name":"Promises","parts":[{"name":"Basic","fragen":[{"frage":"Gestalte einen Promise, der drei Sekunden wartet und dann ein Element Deiner Wahl im DOM erzeugt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Der Promise soll von einem Button getriggert werden.\nMit jedem Klick auf den Button soll ein neues DOM-Element erzeugt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Gestalte einen Promise, der ein DOM-Element Deiner Wahl erzeugt. \nNach einer Sekunde soll das Element wieder entfernt werden. ","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Gestalte einen Promise, der die Summe eines übergebenen Arrays zurückgibt.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Prim","fragen":[{"frage":"Gestalte einen Promise, der eine Zahl darauf prüft, ob es sich um eine Primzahl handelt. \nDie Resolve- und Reject-Funktionen sollen eine entsprechende Ausgabe generieren.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Gestalte einen Promise, der die ersten x Primzahlen erzeugt. \nDiese sollen in einer Liste auf der Seite dargestellt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Netzwerktechnik","fragen":[{"frage":"Gestalte einen Promise, der eine DNS-Abfrage (DNS-Modul) nach einer Domain stellt.\nDie Antwort soll in der Resolve-Funktion ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Node","parts":[{"name":"Basic","fragen":[{"frage":"Lass im Terminal den Text 'Hallo Welt' ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Lege eine Variable mit einem Wert Deiner Wahl an.\nLass diese Variable in der Konsole ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erzeuge ein Array mit 100 Speicherstellen und fülle dies mit zufälligen Zahlen.\nLass dann das ganze Array im Terminal ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Eigenes Modul","fragen":[{"frage":"Schreibe dein eigenes Modul, das die folgenden Methoden zur Verfügung stellt:\n<ul>\n<li>Erzeugen einer zufälligen Zahl mit einer per Parameter definierbaren Anzahl an Nachkommastellen</li>\n<li>Mathematisches Runden einer beliebigen Zahl mit einer per Parameter definierbaren Anzahl an Nachkommastellen</li>\n<li>Eine Klasse, die ein Objekt anlegt, das alle relavten Informationen zu einer Person enthält (Vorname, Nachname, Adresse, Kontaktdaten)</li>\n</ul>","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Express","fragen":[{"frage":"Erzeuge einen Webserver mithilfe des Moduls Express.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wenn vom Client eine Datei abgefragt wird, soll die URL im Terminal dargestellt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Die URLs sollen mitsamt der Uhrzeit in eine Datei (FS-Modul) geschrieben werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Die Log-Datei soll als JSON-Array aufgebaut sein.\nAchte dabei insbesondere darauf, dass gleichzeitige Zugriffe vermieden werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Ajax","fragen":[{"frage":"Lade eine Textdatei vom Server und lass den Inhalt in einem DOM-Element ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erstelle eine Route, die eine Zufallszahl erzeugt und zurückgibt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erstelle eine Webseite mit zwei Eingabefeldern und einem Button.\nWenn der Button geklickt wird, werden die Eingaben an den Server gesendet. Dieser multipliziert die Werte und gibt das Ergebnis zurück.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Gestalte eine Webseite mit einem Texteingabefeld und einem Button.\nDer Benutzer soll in das Eingabefeld einen Dateinamen eingeben. Diese Datei soll dann vom Server geladen und ihr Inhalt in einem Div-Container ausgegeben werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"CMS","fragen":[{"frage":"Erstelle eine Seite mit einem Textarea und einem Button. Wenn der Button gedrückt wird, dann wird der Inhalt an den Server gesendet und dort gespeichert.\nErstelle eine weitere Seite, auf der der gespeicherte Inhalt dargestellt wird.\nOptional: Falls Du schon Datenbanken beherrscht: Speichere die Einträge in eine Datenbank","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Jeder Eintrag soll auf der Darstellungsseite ein eigenes Element sein.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erschaffe eine Möglichkeit, vorhandene Einträge zu entfernen.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erschaffe eine Möglichkeit, vorhandene Einträge zu editieren","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Fileupload","fragen":[{"frage":"Erstelle eine Seite mit einem File-Upload.\nDie Dateien sollen auf den Server übertragen und in den Ordner &lt;i&gt;public/uploads&lt;/i&gt; geschrieben werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zusätzlich soll eine JSON-Datei beschrieben werden, in welcher vermerkt wird, welche Datei welchen ursprünglichen Namen hatte.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Nach dem Upload-Prozess sollen im Client alle hochgeladenen Dateien als Link zum Download dargestellt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Websocket","parts":[{"name":"Kreisspiel","fragen":[{"frage":"Mehrere Benutzer sollen mit einem Server verbunden sein.\nFür jeden Benutzer soll ein Kreis im Browser zu sehen sein.\nWenn ein Benutzer die Pfeil-Tasten betätigt, soll sich der zu ihm gehörige Kreis auf allen Browsern entsprechend bewegen.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Chat","fragen":[{"frage":"Erstelle ein Chat-Programm.\nJeder Benutzer bekommt alle Nachrichten der anderen Benutzer zu sehen.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zusätzlich soll jeder Benutzer seinen Namen angeben können.\nDieser Name wird mit übertragen und bei den anderen Benutzern angezeigt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zusätzlich soll jeder Benutzer eine Farbe wählen können.\nBei den Nachrichten wird dessen Name mit dieser Farbe hinterlegt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zusätzlich sollen alle Nachrichten in einer Datenbank abgelegt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zusätzlich soll mit einem Button der bisherige Chatverlauf aus der Datenbank gelesen werden können.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wann immer ein Client seinen Namen ändert, soll diese Änderung bei allen angezeigt werden","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zusätzlich soll der Benutzer eine Liste aller aktuell angemeldeten Benutzer sehen.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zusätzlich soll ein Benutzer einem anderen eine persönliche Nachricht schicken können, die niemand sonst sieht.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Webworker","parts":[{"name":"Primzahlen","fragen":[{"frage":"Schreibe ein Programm, das mithilfe von Webworkern beliebige Zahlen darauf überprüft, ob es Primzahlen sind.\nFür jede Zahl soll ein DOM-Element angezeigt werden, in dem der aktuelle Status dargestellt wird.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erweitere das Programm so, dass der Webworker regelmäßige Status-Updates liefert, falls der Prozess lange dauert.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erweitere das Programm so, dass jede Primzahl-Prüfung ein eigenes DOM-Element erzeugt. In diesem soll die zu prüfende Zahl angezeigt werden, der Progress sowie das Ergebnis.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erweitere das Programm um einen Button, mit dem der Webworker abgebrochen werden kann.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Canvas-Filter","fragen":[{"frage":"Erschaffe einen Webworker, der einen Canvas weichzeichnet.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erschaffe einen Webworker, der eine ","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Bildanalyse","fragen":[{"frage":"Erschaffe einen Webworker, der aus einem Bild Daten analysiet wie Durchschnitts-Helligkeit, RGB-Verteilung und anderes.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Zeichne ein Histogramm auf die Bilder","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"React","parts":[{"name":"Komponenten","fragen":[{"frage":"Erzeuge eine Komponente, die in einem H2-Container einen Text Deiner Wahl ausgibt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erzeuge eine weitere Komponente, die unter der Überschrift einen DIV-Container mit einem Inhalt Deiner Wahl ausgibt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Statt eines einfachen Textes sollen in dem Div-Container vier p-Tags mit jeweils einem Text Deiner Wahl stehen.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Nach den p-Tags soll eine nummerierte Liste mit Inhalt Deiner Wahl stehen. Jedes li-Element soll aus einer Komponente erzeugt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Klick mich","fragen":[{"frage":"In einer Komponente, die einen Div-Container erzeugt, soll ein Text Deiner Wahl stehen. Innerhalb dieses Textes soll ein span-Element sein.\nDieses span-Element soll bei Klick ein Alert-Fenster öffnen, das den Inhalt des span-Elementes anzeigt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wie oben, aber die Komponente soll einen Counter enthalten. Dieser wird bei Klick hochgezählt und der Zählerstand soll im Button angezeigt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wie oben, aber bei jedem Klick soll ein neues DOM-Element eingehängt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erzeuge eine Komponente, in der in jeder Sekunde ein neues p-tag angelegt wird.\nIn diesen p-Tags steht eine laufende Nummer.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"... und AJAX","fragen":[{"frage":"Lade per Ajax eine Text-Datei.\nDer Inhalt der Text-Datei soll an Zeilenumbrüchen (\\n) aufgeteilt werden und jeder Absatz in einer eigenen p-Tag-Komponente dargestellt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Vue","parts":[{"name":"Eigene Direktiven","fragen":[{"frage":"Erzeuge eine eigene Direktive, die den Inhalt eines DOM-Elementes umdreht.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erzeuge eine Direktive, die für ein Textarea anzeigt: wieviele Zeichen geschrieben wurden und wieviele bis zu einem Maximum noch geschrieben werden können.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erzeuge eine Direktive, die es erlaubt, Kommentare zu einem Div-Element zu schreiben.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Klick mich","fragen":[{"frage":"Erzeuge eine Seite mit einem Knopf. Wenn der Knopf angeklickt wird, soll ein Zähler hochgezählt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wie oben, aber wenn der Knopf gedrückt wird, soll ein neues Element erzeugt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"CouchDB","parts":[{"name":"Städte","fragen":[{"frage":"Lege im CouchDB-Backend unter http://localhost:5984/_utils/ eine Datenbank an, in der Informationen über verschiedene Städte angelegt werden. Trage in diese Datenbank Informationen zu zwei Städten ein. Diese Informationen sollen enthalten:\n<ul>\n<li>Name der Stadt</li>\n<li>Kennzeichen</li>\n<li>Land</li>\n<li>Einwohner</li>\n</ul>","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Lies die Daten der Städte per NodeJS aus der Datenbank aus und lass sie im Terminal ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Trage mit NodeJS eine weitere Stadt in die Datenbank ein und lass die Sammlung ausgeben.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Lege eine HTML-Datei an, die im Browser die Datensammlung anzeigt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erweitere die HTML Seite um eine Suche nach Stadtnamen.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Komplexe Aufgaben","parts":[{"name":"Blog","fragen":[{"frage":"Erstelle eine Seite mit einem Textarea und einem Button. Wenn der Button gedrückt wird, dann wird der Inhalt im Localstorage gespeichert.\nErstelle eine weitere Seite, auf der der gespeicherte Inhalt dargestellt wird.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Neben dem reinen Content sollen außerdem eine Überschrift sowie ein Timestamp gespeichert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Die Daten sollen an einen Webserver gesendet und dort in einer Variablenm gespeichert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Neben den bisherigen Inhalten soll auch ein Bild als Illustration hochgeladen werden können.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Neben den bisherigen Inhalten soll aus einer Sammlung von Tags eine Auswahl getroffen werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Die Content-Daten sollen in einer Datenbank abgelegt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wenn die Backend-Seite geöffnet wird, muss sich der Benutzer anmelden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Mini-Projekte","parts":[{"name":"Datenbank","fragen":[{"frage":"Schreibe ein Programm, das die gesamte Couch-DB als JSON exportiert.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erweitere das Programm so, dass die JSON-Datei wieder in die CouchDB importiert werden kann.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erweitere das Programm so, dass vor dem Export angegeben werden kann, welche Datenbanken exportiert werden sollen.  ","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Kontaktformular","fragen":[{"frage":"Gestalte eine Webseite mit einem Kontaktformular.\nDieses Kontaktformular soll auf Gültigkeit verifiziert werden.\nDer 'Absenden'-Knopf darf erst funktionieren, wenn alle Bedingungen erfüllt sind.\nDie folgenden Daten sollen geprüft werden:\n\n    Alle Eingabefelder, die mit der Klasse 'mandatory' belegt sind, müssen Inhalt haben.\n    Die Postleitzahl muss eine 5-stellige Zahl sein.\n    Die Telefonnummer darf nur aus Zahlen, Leerstellen, Bindestrich und Schrägstrich bestehen.\n    Wenn die Vorwahl mit einer einzigen '0' beginnt, dann soll diese '0' entfernt werden und die internationale Vorwahl für Deutschland (+49) eingefügt werden.\n    Die E-Mail-Adresse muss gültig sein (@, TLD, Punkte).\n    Die Webadresse muss gültig sein (Protokoll, TLD).\n    Der Knopf 'AGB akzeptiert' muss angehakt sein. \n\nFelder, die diesen Vorgaben nicht entsprechen, sollen rot umrandet werden und mit einem Hinweistext versehen werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Drag 'n' Drop","fragen":[{"frage":"Erzeuge einen Div-Container, der sich anfassen und verschieben lässt (Drag&Drop).\nBenutze dafür keine 3rd-Party-Bibliothek.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erzeuge weitere Div-Container, in die sich der zu verschiebende Container ablegen lässt.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Sortieren","fragen":[{"frage":"Schreibe ein Programm, das alle DIV-Container auf einer Seite alphabetisch sortiert.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erweitere das Programm, dass es alle Elemente eines bestimmten Typs (div, tr, td, p, etc.) alphabetisch sortiert.\nDer Elementtyp soll über eine Selectbox ausgewählt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Die Selectbox soll automatisch mit allen zur Verfügung stehenden Elementtypen gefüllt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Erzeuge eine Tabelle mit einer Header-Zeile. Der Tabellen-Körper soll mit Zahlen gefüllt werden.\nWenn eine der Kopf-Felder angeklickt wird, dann soll die Tabelle nach der angeklickten Spalte sortiert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Filtern","fragen":[{"frage":"Lege eine Tabelle und ein Texteingabefeld an.\nEs sollen nur die Tabellenzeilen dargestellt werden, in denen die Eingabe vorkommt.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Lege ein Div-Element an und ein Texteingabefeld an.\nIm Div-Container sollen dann alle Vorkommen der Eingabe farbig markiert werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Rekursion","fragen":[{"frage":"Erstelle einen Raster von 16*16 Feldern.\nDiese sollen zufällig mit den ganzen Zahlen 1, 2 und 3 belegt werden.\nWenn eines der Felder angeklickt wird, dann sollen alle Felder mit gleichem Inhalt geleert werden, die direkt an diesem Feld liegen.\nDieses Leeren der Felder mit gleichem Inhalt soll rekursiv weiter geführt werden.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Gamesteuerung","fragen":[{"frage":"Lass in einem Canvas einen Kasten sich per Tastatursteuerung (W,A,S,D) lenken.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wie oben. Aber das zu steuernde Element soll eine Trägheit haben.\nD.h., es soll bei Druck auf eine Taste (W,A,S,D) in die entsprechende Richtung beschleunigen.\nWird die Taste losgelassen, läuft das Element weiter, bis es von der Reibung zum Stillstand gebracht wird. ","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Wie oben. Aber die Seitwärts-Tasten (A, D bzw Pfeile) sollen das Element drehen und eine Taste Deiner Wahl soll das Element in die Richtung bewegen, in die es zeigt.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Kollision","fragen":[{"frage":"Lass in einem Canvas einen Kasten sich bewegen (automatisch oder per Benutzereingabe).\nSobald der Player ein anderes Element berührt, soll eine entsprechende Meldung kommen.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Die Kollision soll pixelgenau sein.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]},{"name":"Römische Zahlen ","fragen":[{"frage":"Erstelle ein Programm, das Arabische Zahlen in Römische Zahlen umwandeln.","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]},{"name":"Tagesaufgabe DOM","parts":[{"name":"Funktionen","fragen":[{"frage":"Erstelle eine Webseite, in der ein Javascript-Tag eingebunden ist. \nIn diesem Tag soll eine init()-Funktion liegen.\nDer HTML-Bereich soll einen Header- und einen main.-Bereich enthalten.","typ":"praxis","schwierigkeit":0,"antworten":[""]},{"frage":"Entwickle eine Funktion, mit der beliebige dom-Elemente erzeugt werden können","typ":"praxis","schwierigkeit":0,"antworten":[""]}]}]}]}