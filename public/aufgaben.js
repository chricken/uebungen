'use strict';

let json = { "root": [{ "name": "Basics", "parts": [{ "name": "Variablen", "fragen": [{ "frage": "Lege eine Variable mit einem Wert Deiner Wahl an.\nLass diese Variable in der Konsole ausgeben.", "antworten": ["let x = 42;\nconsole.log(x);"] }, { "frage": "Wie oben, aber lass das Doppelte der Variablen ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let x = 42;\nx = x * 2;\nconsole.log(x);", "let x = 42;\nx *= 2;\nconsole.log(x);", "let x = 42;\nconsole.log(x*2);"] }, { "frage": "Lege eine Variable mit einem Wert Deiner Wahl an.\nLass den Sinus dieser Variable in der Konsole ausgeben.\nBeachte, dass die Sinus-Funktion Bogenmaß erwartet.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let x = 42;\nconsole.log( Math.sin( x / 180 * Math.PI) );", "const bm = winkel => winkel / 180 * Math.PI;\nlet x = 42;\nconsole.log(Math.sin(bm(x)));"] }, { "frage": "Lass eine zufällige Zahl in einem Alert-Fenster ausgeben", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufallErzeugen = (min=0, max=100) => Math.floor(Math.random() * (max - min * 1) + min);\nconsole.log( zufallErzeugen() ); "] }] }, { "name": "Datentypen", "fragen": [{ "frage": "Lass den Datentypen einer Variablen ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let x = 42;\nconsole.log( typeof x );  // -> number"] }] }] }, { "name": "Strings", "parts": [{ "name": "Einfache Manipulationen", "fragen": [{ "frage": "Lege einen String an und fülle diesen mit einem Text Deiner Wahl.\nDer Text soll aus mindestens 200 Zeichen bestehen.\nGib den String in der Konsole aus.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.';\nconsole.log(s);", "let zeichen = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789        '.split('');\nlet s = '';\nfor ( let i = 0; i < 200; i++){\n    let z = Math.floor(Math.random()*zeichen.length);\n    s+= zeichen[z];\n}\nconsole.log(s);"] }, { "frage": "Wie oben, aber gib nur die ersten 50 Zeichen aus.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.';\nconsole.log(s.substr(0,50));"] }, { "frage": "Wie oben, aber gib die mittleren 50 Zeichen aus.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.';\nlet start = Math.floor(s.length/2)-25;\nconsole.log(s.substr(start,50));"] }, { "frage": "Suche das erste Vorkommen des Wortes \"und\" und ersetze es durch das Wort \"oder\".", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.replace('und', 'oder');\nconsole.log(s);"] }, { "frage": "Ersetze alle \"und\" durch \"oder\"", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.replace(/und/g, 'oder');\nconsole.log(s);", "let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\nwhile (s.includes('und')) {\n    s = s.replace('und', 'oder');\n}\nconsole.log(s);", "let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.split('und').join('oder');\nconsole.log(s);"] }] }, { "name": "Palindrom", "fragen": [{ "frage": "Erzeuge einen String Deiner Wahl.\nDreh den gesamten String um und lass den umgedrehten String in einem DOM-Element ausgeben. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Sonne und Mond und Sterne sind schön und weit weg.';\ns = s.split('').reverse().join('');\nconsole.log(s);"] }, { "frage": "Lass den Benutzer einen String eingeben und überprüfe, ob dieser String vorwärts wie rückwärts gelesen derselbe ist (Sog. Palindrome).\nBeachte auch, dass das erste Zeichen häufig groß geschrieben wird.\nBeispiele für Palindrom: Regallager, Rentner, Drehherd, Kajak, Reittier", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = prompt('Text?');\nlet gedreht = s.split('').reverse().join('').toLowerCase();\nconsole.log( gedreht == s.toLowerCase() );"] }] }] }, { "name": "Schleifen", "parts": [{ "name": "Iterationen", "fragen": [{ "frage": "Erzeuge einen String Deiner Wahl.\nLass jedes zweite Zeichen (auch Leerzeichen) in einem eigenen DOM-Element ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Hallo Welt';\n\nfor ( let i = 1; i < s.length; i+=2){\n    let d = document.createElement('span');\n    d.innerHTML = s[i];\n    document.body.append(d);\n}", "let s = 'Hallo Welt';\n\nlet a = s.split('').filter((el,i)=>i%2).forEach( el => {\n    let d = document.createElement('span');\n    d.innerHTML = el;\n    document.body.append(d);\n})"] }, { "frage": "Erzeuge einen String Deiner Wahl.\nLass jedes zweite Zeichen (auch Leerzeichen) in einem gemeinsamen DOM-Element ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Hallo Welt';\nlet ausgabe = '';\nfor ( let i = 1; i < s.length; i+=2){\n    ausgabe += s[i];\n}\nlet d = document.createElement('span');\nd.innerHTML = ausgabe;\ndocument.body.append(d);", "let s = 'Hallo Welt';\n\nlet d = document.createElement('span');\nd.innerHTML = s.split('').filter((el, i) => i % 2).join('');\n\ndocument.body.append(d);"] }, { "frage": "Der Benutzer gibt einen Text ein. \nDer Computer gibt dann die Zeichen im Abstand von einer Sekunde wieder aus.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Hallo Welt';\nlet timer = Number(prompt('Wartezeit?'));\nlet counter = 0;\nlet intID = 0;\n\nconst ausgeben = () => {\n    console.log( counter );\n    \n    if (counter >= s.length) {\n        clearInterval(intID);\n    } else {\n        let d = document.createElement('span');\n        d.innerHTML = s[counter++];\n        document.body.append(d);\n    }\n}\nconst init = () => {\n    intID = setInterval(ausgeben, timer * 1000);\n}\ninit();"] }] }, { "name": "Berechnungen", "fragen": [{ "frage": "Erzeuge eine Schleife, die alle Zahlen von 1 bis 100 addiert und das Ergebnis ausgibt.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let sum = 0;\nfor ( let i = 0; i < 100; i++){\n    sum += i;\n}\nconsole.log(sum);", "let zahlen = [...new Array(100)].map((el, index) => index);\nconsole.log(zahlen.reduce((sum,el) => sum+el, 0));"] }, { "frage": "Lege eine Schleife an, welche für eine gegebene Geldsumme, Verzinsung und Laufzeit die Zinsen und Zinseszinsen berechnet.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let geld = 100;\nlet laufzeit = 5;\nlet zinsen = 3;\n\nfor ( let i = 0; i < laufzeit; i++){\n    geld += geld/100*zinsen;\n}\ngeld = Math.round( geld * 100 ) / 100;\nconsole.log(geld);"] }] }, { "name": "Zufall", "fragen": [{ "frage": "Erzeuge eine Schleife, die zählt, wieviele von 100 zufälligen Zahlen zwischen 0 und 1 größer sind als 0.75.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let counter = 0; \nfor ( let i = 0; i < 100; i++){\n    if ( Math.random() > .75) counter++;\n}\nconsole.log(counter);", "console.log([...new Array(100)].map(()=>Math.random()).filter(el => el > .75).length);"] }] }, { "name": "Zahlenspiel", "fragen": [{ "frage": "Der Computer erzeugt eine ganze Zahl zwischen 1 und 1000.\nDer Benutzer muss raten, um welche Zahl es sich handelt.\nBei jedem Rateversuch meldet der Computer, ob die gesuchte Zahl größer oder kleiner als die eingegebene Zahl ist.\nDann kann der Benutzer es weiter versuchen, bis er die richtige Zahl gefunden hat.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }, { "name": "Funktionen / Zeitsteuerung", "parts": [{ "name": "Einfache Aufrufe", "fragen": [{ "frage": "Lege eine Funktion an, welche einen Text ausgibt.\nRuf diese Funktion 5mal auf, so dass der Text fünf mal erscheint.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const ausgabe = () => console.log('Hallo Welt');\n\nfor (let i = 0; i < 5; i++) ausgabe();", "const ausgabe = () => console.log('Hallo Welt');\n\nlet anzahl = 5;\nwhile (anzahl--) ausgabe();"] }, { "frage": "Lege eine Funktion an, welche einen Text ausgibt, der als Parameter übergeben wird.\nRuf diese Funktion 5mal auf, so dass 5mal der Text erscheint, der jeweils übergeben wurde.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const ausgabe = text => console.log(text);\n\nausgabe('abc');\nausgabe('def');\nausgabe('ghi');\nausgabe('jkl');\nausgabe('mno');", "const ausgabe = text => console.log(text);\n\n['abc','def','ghi','jkl','mno'].forEach( ausgabe );"] }, { "frage": "Lege eine Funktion an.\nRuf diese Funktion 5mal auf.\nBei jedem Aufruf der Funktion soll ausgegeben werden, wie oft die Funktion schon aufgerufen wurde.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let counter = 0;\nconst ausgabe = () => {\n    counter++;\n    console.log(counter);\n} \n\nfor(let i = 0; i<5;i++) ausgabe();", "let counter = 0;\nconst ausgabe = () => {\n    console.log(++counter);\n}\n\nfor (let i = 0; i < 5; i++) ausgabe();", "const ausgabe = counter => {\n    console.log(++counter);\n    if (counter < 5) ausgabe(counter);\n}\n\nausgabe(0);"] }, { "frage": "Der Benutzer soll zwei Eingaben machen.\nDiese werden an eine Funktion übergeben, die dann das Produkt der beiden Zahlen zurückgibt.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const mult = (a, b) => {\n    console.log(a * b);\n}\n \nmult(prompt('wert 1'), prompt('wert 2'));"] }, { "frage": "Erzeuge eine Funktion, die für einen übergebenen Parameter überprüft, ob dieser durch 3 teilbar ist.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const ausgabe = wert => {\n    if ( wert % 3 == 0 ) console.log( `${wert} ist durch 3 teilbar` );\n    else console.log( `${wert} ist nicht durch 3 teilbar` );\n}\n\nausgabe(12);\nausgabe(13);", "const ausgabe = wert => {\n    console.log ( \n        !(wert % 3)\n        ? `${wert} ist durch 3 teilbar`\n        : `${wert} ist nicht durch 3 teilbar`\n    );\n}\n\nausgabe(12);\nausgabe(13);"] }, { "frage": "Erzeuge eine Funktion, an die zwei Parameter übergeben werden.\nDann soll überprüft werden, ob der erste Parameter durch den zweiten Parameter teilbar ist.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const ausgabe = (wert, teiler) => {\n    if ( wert % teiler == 0 ) console.log( `${wert} ist durch ${teiler} teilbar` );\n    else console.log( `${wert} ist nicht durch ${teiler} teilbar` );\n}\nausgabe(12,4);\nausgabe(13,3);"] }] }, { "name": "Zahlenreihen", "fragen": [{ "frage": "Lege eine Funktion an, die einen übergebenen Parameter überprüft, ob es sich um eine Primzahl handelt.\nSonderfälle: 0 ist keine Primzahl, 1 ist keine Primzahl.", "typ": "praxis", "schwierigkeit": 0, "antworten": [" const isPrim = wert => {    \n    if ( wert == 0 || wert == 1) return false;\n    for ( let i = 2; (i*i) <= wert; i++ ){\n        if ( wert % i == 0 ) return false;\n    }\n    return true;\n}\nconsole.log( isPrim(13) );"] }, { "frage": "Lege eine Funktion an, die zwei Parameter annimmt.\nDie Funktion soll ein Array mit allen Primzahlen zwischen den beiden Werten zurückgeben. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const isPrim = wert => {    \n    if ( wert == 0 || wert == 1) return false;\n    for ( let i = 2; (i*i) <= wert; i++ ){\n        if ( wert % i == 0 ) return false;\n    }\n    return true;\n}\n\nconst primRange = (x,y) => {\n    let prims = [];\n    for ( x; x <= y; x++){\n        if ( isPrim(x) ) prims.push(x);\n    }\n    return prims;\n}\nconsole.log( primRange(100, 200) );"] }, { "frage": "Lege eine Funktion an, welche die Fibonacci-Reihe (1,1,2,3,5,8,13,21,...) zurückgibt.\nDie Länge der Reihe soll per Parameter übergeben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let makeFibo = laenge => {\n    let f1 = 1, f2 = 1;\n    let reihe = [];\n    for ( let i = 0; i < laenge; i++){\n        reihe.push(f1);\n        [f2,f1]=[f1,f1 + f2];\n    }\n    return reihe;\n}\nconsole.log( makeFibo(20) );"] }, { "frage": "Lege eine Funktion an, die überprüft, ob eine übergebene Zahl Teil der Fibonacci-Reihe ist.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let isInFibo = wert => {\n    let f1 = 1, f2 = 1;\n    while (f1 <= wert) {\n        if (f1 == wert) return true;\n        [f2, f1] = [f1, f1 + f2];\n    }\n    return false;\n}\nconsole.log(isInFibo(10946));"] }] }, { "name": "Zufälle", "fragen": [{ "frage": "Lege eine Funktion an, welche eine zufällige, ganze Zahl erzeugt. Die Funktion soll zwei Parameter annehmen, welche den maximalen und den minimalen Wert darstellen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufallErzeugen = (min=1,max=6) => Math.floor( Math.random() * (max-min+1) + min);\n\nconsole.log( zufallErzeugen(10,100));\nconsole.log( zufallErzeugen());"] }, { "frage": "Funktion wie oben, aber ein dritter Parameter soll bestimmen, wieviele Nachkommastellen die zufällige Zahl haben soll.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufallErzeugen = (min = 1, max = 6, dez = 0) => {\n    dez = 10 ** dez;\n    let z = Math.random();\n    z *= (max - min + (1 / dez));\n    z += min;\n    z = Math.floor(z * dez) / dez;\n    return z;\n}\n\nconsole.log(zufallErzeugen(10, 100, 2));\nconsole.log(zufallErzeugen());"] }, { "frage": "Lege eine Funktion an, welche den String für eine zufällige Farbe erzeugt.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufallErzeugen = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\nconst zufallFarbe = () => `hsl(${zufallErzeugen(0,360)},100%,50%)`;\nconsole.log(  zufallFarbe() );", "let zeichen = '0123456789abcdef'.split('');\nconst zufallErzeugen = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\nconst zufallFarbe = () => {\n    let farbe = '#';\n    for ( let i = 0; i < 6; i++){\n        farbe += zeichen[zufallErzeugen(0,zeichen.length)];\n    }\n    return farbe;\n}\nconsole.log(  zufallFarbe() );"] }] }, { "name": "Zeitsteuerung", "fragen": [{ "frage": "Der Benutzer soll eine Zahl eingeben können. \nDie Webseite wartet dann die angegebenen Anzahl an Sekunden und macht eine Ausgabe.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let delay = prompt('Wartezeit');\nsetTimeout(() => {\n    alert('Ich bin die Ausgabe!');\n}, delay*1000);"] }, { "frage": "Der Benutzer soll eine Zahl x eingeben.\nDie Webseite soll dann alle x Sekunden ein neues Inhaltselement erzeugen und in die Seite einhängen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let delay = prompt('Delay:');\nsetInterval(() => {\n    let neu = document.createElement('div');\n    neu.innerHTML = delay;\n    document.body.append(neu);\n}, delay*1000);"] }] }] }, { "name": "Arrays", "parts": [{ "name": "Einfache Manipulation", "fragen": [{ "frage": "Lege ein Array mit 100 Stellen an und fülle jede Speicherstelle mit einer zufälligen ganzen Zahl zwischen 0 und 50. \nLass den gesamten Inhalt ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufall = (min=0, max=100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = [], anzahl = 10;\nfor (let i = 0; i < anzahl; i++) {\n    a.push(zufall())\n}\nconsole.log( a ); ", "const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) {\n    a[i] = zufall();\n}\nconsole.log(a);"] }, { "frage": "Lass den Durchschnitt aller Zahlen in diesem Array ausgeben. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let durchschnitt = a.reduce((a,b) => a+b) / a.length;\nconsole.log (durchschnitt); "] }, { "frage": "Lass jede Speicherstelle des Array einzeln mit seinem Index ausgeben", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\n\nlet a = [];\nfor (let i = 0; i < 100; i++) a.push(zufall());\n\na.forEach((el, index) => console.log(index, el));"] }, { "frage": "Lass nur die Speicherstellen des Array ausgeben, die kleiner sind als 50. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\n\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n\na.forEach( el => {\n    if( el < 50 ) console.log( el );\n})\nconsole.log( a.join(', ') );", "const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n\nconsole.log( a.filter( el => el < 50 ).join(', ') );"] }, { "frage": "Ermittle, wieviele der Elemente kleiner sind als 50. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n\nconsole.log( a.filter( el => el < 50 ).join(', ') );\nconsole.log( a.filter( el => el < 50 ).length );", "const zufall = (min = 0, max = 100) => ~~(Math.random() * (max - min + 1) + min);\nlet a = new Array(10);\nfor (let i = 0; i < a.length; i++) a[i] = zufall();\n\nconsole.log(a.reduce((anzahl, el) => {\n    if (el < 50) return anzahl + 1\n    else return anzahl\n}, 0));"] }, { "frage": "Statt der 50 soll über ein &lt;input type='range'&gt; den Schwellwert festgelegt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Erweitere Manipulation", "fragen": [{ "frage": "Erzeuge ein Array, welches die Zahlen von 0 bis 100 enthält.\nLege eine Funktion an, die dieses Array durchmischt.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let a = [];\nfor (let i = 0; i < 100; i++) a.push(i);\n\n\nfor (let i = 0; i < a.length; i++) {\n    let z = ~~(Math.random() * a.length);\n    [a[i], a[z]] = [a[z], a[i]];\n}\nconsole.log(a.join(', '));"] }, { "frage": "Erzeuge ein Array, das die Zahlen von 1 bis 5 enthält.\nTausche dann die zweite und die vierte Speicherstelle gegeneinander aus und lass das Array ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let a = [1, 2, 3, 4, 5];\nlet temp = a[1];\na[1] = a[3];\na[3] = temp;\nconsole.log(a);", "let a = [1, 2, 3, 4, 5];\na = [a[0], a[3], a[2], a[1], a[4]]\nconsole.log(a); ", "let a = [1, 2, 3, 4, 5];\n[a[1], a[3]] = [a[3], a[1]];\nconsole.log(a);"] }, { "frage": "Lass den Benutzer einen Text eingeben und ermittle dann, wie viele Leerzeichen in diesem Text vorkommen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = prompt('Eingabe:');\nlet count = 0;\nfor (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ') count++;\n}\nconsole.log(count);", "let s = prompt('Eingabe:');\nlet count = s.split('').reduce((count, char) => {\n    if (char == ' ') count++;\n    return count;\n}, 0)\nconsole.log(count);", "let s = prompt('Eingabe:');\nlet count = s.split(' ').length - 1\nconsole.log(count); "] }] }, { "name": "Lotto", "fragen": [{ "frage": "Erzeuge ein Array für Lottozahlen.\nD.h. Speichere in diesem Array sechs Zufallszahlen von 1 bis 49 und stelle dabei sicher, dass keine der Zahlen doppelt vorkommt.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let a = [];\nconst zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nwhile (a.length < 6) {\n    let z = zufall(1, 49);\n    if (!a.includes(z)) a.push(z);\n}\na.sort((a, b) => a - b);\nconsole.log(a);", "const zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nconst makeLotto = () => {\n    let stapel = [...new Array(49)].map((el, i) => i + 1);\n    let lotto = [];\n    for (let i = 0; i < 6; i++) {\n        let z = zufall(0,stapel.length-1);\n        lotto.push(stapel.splice(z,1)[0]);\n    }\n    lotto.sort((a, b) => a - b);\n    return(lotto);\n\n}\nconsole.log ( makeLotto() );", "const zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nconst makeLotto = () => {\n    let stapel = [...new Array(49)].map((el, i) => i + 1);\n    let lotto = [...new Array(6)].map(() => stapel.splice(zufall(0, stapel.length - 1), 1)[0]);\n    lotto.sort((a, b) => a - b);\n    return (lotto);\n}\nconsole.log(makeLotto());", "const zufall = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nlet lotto = new Set();\nwhile (lotto.length < 6) {\n    lotto.add(zufall(0, 49));\n}\nlotto = [...lotto];\nlotto.sort((a, b) => a - b);\nconsole.log(lotto);"] }] }, { "name": "Kopieren", "fragen": [{ "frage": "Erzeuge ein Array mit 10 zufälligen Zahlen.\nLege eine echte Kopie dieses Arrays an. D.h. eine Änderung in dem originalen Array darf die Kopie nicht ändern.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let a = [];\nfor ( let i = 0; i < 10; i++) \n    a.push(~~(Math.random()*100));\n\nlet b = a.map(el => el);\na[0] = -1;\nconsole.log( b );", "let a = [];\nfor ( let i = 0; i < 10; i++) \n    a.push(~~(Math.random()*100));\n\nlet b = [...a];\na[0] = -1;\nconsole.log( b );", "let a = [];\nfor ( let i = 0; i < 10; i++) \n    a.push(~~(Math.random()*100));\nasd\nlet b = a.slice(0);\na[0] = -1;\nconsole.log( b )"] }, { "frage": "Erweitere dieses Array um drei zufällige Zahlen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let a = [];\nlet z = () => ~~(Math.random()*100);\nfor ( let i = 0; i < 10; i++) \n    a.push(z());\n\nlet b = [...a, z(), z(), z()];\nconsole.log(a);\nconsole.log(b);", "let a = [];\nlet z = () => ~~(Math.random() * 100);\nfor (let i = 0; i < 10; i++)\n    a.push(z());\n\nlet b = a.slice(0);\n\nfor (let i = 0; i < 3; i++) b.push(z());\nconsole.log( b );"] }] }, { "name": "Namen", "fragen": [{ "frage": "Lege zwei Arrays mit einigen Vor- und Nachnamen an.\nErzeuge 20 zufällige Vorname/Nachname-Kombinationen und lass sie ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\nconst zufallsAuswahl = (sammlung) => {\n    return sammlung[zufallErzeugen(0,sammlung.length-1)];\n}\nlet name = `${zufallsAuswahl(weiblich)} ${zufallsAuswahl(nachnamen)}`;\nconsole.log(name);"] }, { "frage": "Lass einige der Kombinationen Doppelnamen tragen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let maennlich = ['Ralf', 'Erwin', 'Jürgen', 'Harald', 'Stefan'];\nlet weiblich = ['Erika', 'Julia', 'Rosamunde', 'Melanie', 'Jasmin'];\nlet nachnamen = ['Schmidt', 'Müller', 'Meyer', 'Schulz', 'Kowalski'];\n\nconst zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nconst zufallsAuswahl = (sammlung, anzahl) => {\n    let auswahl = [];\n    sammlung = [...sammlung];\n    for (let i = 0; i < anzahl; i++) {\n        auswahl.push(sammlung.splice(zufallErzeugen(0, sammlung.length - 1), 1)[0]);\n    }\n    return auswahl;\n}\n\nlet name = zufallsAuswahl(weiblich, zufallErzeugen(1,2)).join('-');\nname += ' ';\nname += zufallsAuswahl(nachnamen, zufallErzeugen(1,2)).join('-');\n\nconsole.log(name);"] }] }, { "name": "CSV", "fragen": [{ "frage": "Wandle einen String wie \"4, 85, 26, 14, 19, 15, 23\" in ein Array um, das nach Größe sortiert ist.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = '4, 85, 26, 14, 19, 15, 23';\nlet a = s.split(', ');\na.sort((a,b) => a - b);\nconsole.log(a);", "let s = '4, 85, 26, 14, 19, 15, 23';\nlet a = s.split(',').map(el => Number(el.trim()));\na.sort((a,b) => a - b);\nconsole.log(a);"] }, { "frage": "Lass für jeden Wert, der größer als 18 ist ausgeben, wie weit dieser von 18 entfernt ist.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = '4, 85, 26, 14, 19, 15, 23';\nlet a = s.split(',').map(el => Number(el.trim()));\n\na = a.filter(el => el > 18)\n    .map(el => el - 18)\n    .forEach(el => console.log(el));"] }, { "frage": "Wandle einen String wie \"Werner, 12; Amelie, 24; Jürgen, 41; Julia, 31; Marek, 21; Indra, 28\" in ein Array um. Das Array soll Objekte mit Namen und Alter enthalten. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Werner, 12; Amelie, 24; Jürgen, 41; Julia, 31; Marek, 21; Indra, 28';\n\nlet a = s.split(';')\n    .map(el => el.trim())\n    .map(el => {\n        let temp = el.split(',').map(el => el.trim());\n        return {\n            name: temp[0],\n            alter: temp[1]\n        }\n    });\n\nconsole.log(a);"] }, { "frage": "Wie oben und die Objekte im Array soll nach Alter sortiert werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let s = 'Werner, 12; Amelie, 24; Jürgen, 41; Julia, 31; Marek, 21; Indra, 28';\n\nlet a // Wie oben\n\na.sort((a, b) => {\n    return a.alter - b.alter;\n})\nconsole.log(a);"] }] }, { "name": "DNA", "fragen": [{ "frage": "Erzeuge mit Hilfe einer Schleife ein Array mit einer Länge von 500 Zeichen, der aus den Zeichen A, G, C und T besteht.\nDiese sollen mit einer Wahrscheinlichkeit von jeweils 25% zufällig ausgewählt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let zeichen = ['A','C','G','T'];\nlet dna = [];\nconst zufall = () => ~~(Math.random() * zeichen.length);\nfor ( let i = 0; i < 500; i++ ) dna.push( zeichen[zufall()]);\nconsole.log(dna.join(' '));"] }, { "frage": "Ersetze im Array jedes G durch ein Y.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let zeichen = ['A', 'C', 'G', 'T'];\nlet dna = [];\nconst zufall = () => ~~(Math.random() * zeichen.length);\nfor (let i = 0; i < 500; i++) dna.push(zeichen[zufall()]);\ndna = dna.map(el => el == 'G' ? 'Y' : el);\nconsole.log(dna.join(' '));"] }] }] }, { "name": "Objekte", "parts": [{ "name": "Objekt", "fragen": [{ "frage": "Lege ein Objekt an, das für ein Gebäude die folgenden Informationen enthält:\n\n    Strasse\n    Hausnummer\n    Postleitzahl\n    Ort\n    Eigentümer ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let haus = {\n    strasse:'Mustergasse',\n    hnr:'12b',\n    plz:'01478',\n    ort: 'Musterhausen',\n    eigentuemer: 'Max Mustermann'\n}", "let haus = {\n    adresse: {\n        strasse: 'Mustergasse',\n        hnr: '12b',\n        plz: '01478',\n        ort: 'Musterhausen',\n    },\n    eigentuemer: {\n        vname: 'Max',\n        nname: 'Mustermann',\n        adresse: { /* Adressdaten */ }\n    }\n}\n\nconsole.log(haus);"] }, { "frage": "Füge zu dem Objekt eine Methode hinzu, welche als Rückgabewert die gesamte Adresse als String liefert.\nBenutze diese Methode, um die gesamte Adresse auszugeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let haus = {\n    adresse: {\n        strasse: 'Mustergasse',\n        hnr: '12b',\n        plz: '01478',\n        ort: 'Musterhausen',\n    },\n    eigentuemer: {\n        vname: 'Max',\n        nname: 'Mustermann',\n        adresse: { /* Adressdaten */ }\n    },\n    get getAdresse(){\n        return `${this.adresse.strasse} ${this.adresse.hnr}\\n${this.adresse.plz} ${this.adresse.ort}`\n    }\n}\n\nconsole.log(haus.getAdresse);", "let haus = {\n    adresse: {\n        strasse: 'Mustergasse', hnr: '12b', plz: '01478', ort: 'Musterhausen',\n        getAdresse(isHtml = true) {\n            let ausgabe = `${this.strasse} ${this.hnr}`;\n            ausgabe += isHtml ? '<br />' : '\\n';\n            ausgabe += `${this.plz} ${this.ort}`;\n            return ausgabe;\n        }\n    },\n    eigentuemer: { vname: 'Max', nname: 'Mustermann', adresse: { /* Adressdaten */ } },\n\n}\n\nconsole.log(haus.adresse.getAdresse());\nconsole.log(haus.adresse.getAdresse(false));"] }, { "frage": "Erweitere das Objekt durch ein Array.\nDieses Array soll vier Mietparteien darstellen, jede in einem eigenen Objekt.\nJedes Mietparteien-Objekt soll enthalten:\n<ul>\n    <li>Vorname</li>\n    <li>Nachname</li>\n    <li>Wohnungsnummer</li>\n    <li>Kaltmiete </li>\n</ul>", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let haus = {\n    adresse: {\n        strasse: 'Mustergasse', hnr: '12b', plz: '01478', ort: 'Musterhausen',\n        getAdresse(isHtml = true) {\n            let ausgabe = `${this.strasse} ${this.hnr}`;\n            ausgabe += isHtml ? '<br />' : '\\n';\n            ausgabe += `${this.plz} ${this.ort}`;\n            return ausgabe;\n        }\n    },\n    eigentuemer: { vname: 'Max', nname: 'Mustermann', adresse: { /* Adressdaten */ } },\n    mieter: [],\n    neuerMieter(vname, nname, wnr, km){\n        this.mieter.push({vname, nname, wnr, km});\n    }\n}\n\nconst init = () => {\n    haus.neuerMieter( 'Max', 'Mustermann', 2, 500 );\n    haus.neuerMieter( 'Beate', 'Beispiel', 4, 350 );\n    haus.neuerMieter( 'Alex', 'Anderson', 3, 380 );\n    haus.neuerMieter( 'Julia', 'Janke', 1, 550 );\n    \n    console.log( haus );\n}\n\ninit();"] }, { "frage": "Gib den ganzen Namen des zweiten Mieters aus.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let haus = {\n    // ...\n    getNameOfMieter(wnr){\n        // Mieter[1] ausgeben macht keinen Sinn, da diese Information für unseren Kunden nichts bringt\n        // Besser: \n        let gesuchterMieter = this.mieter.find( el => el.wnr == wnr );\n        if ( gesuchterMieter )\n            return `${gesuchterMieter.vname} ${gesuchterMieter.nname}`;\n        else \n            return `Wohnungsnummer unbekannt`\n    }\n}\n\nconst init = () => {\n    // Mieter eintragen\n    \n    console.log( haus.getNameOfMieter(1) );\n    console.log( haus.getNameOfMieter(5) );\n}\n\ninit();"] }, { "frage": "Errechne die gesamte Kaltmiete, die das Gebäude einbringt.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let haus = {\n    // ...\n    get kmGesamt(){\n        return this.mieter.reduce( (sum, el) => sum + el.km, 0 );\n    }\n}\n \nconst init = () => {\n    // Mieter eintragen\n    \n    console.log( haus.kmGesamt );\n}\n\ninit();"] }, { "frage": "Erstelle eine Methode, die die Daten aller Mieter im DOM ausgibt.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let createElement = (\n    inhalt = false,\n    typ = 'div',\n    eltern = document.querySelector('#ausgabe')\n) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    eltern.append(neu);\n    return neu;\n}\n\nlet haus = {\n    // ...\n    allData(eltern) {\n        let sorted = [...this.mieter];\n        sorted.sort((a, b) => a.wnr < b.wnr ? -1 : 1);\n        sorted.forEach(mieter => {\n            let karte = createElement();\n            createElement(`${mieter.vname} ${mieter.nname}`, 'h3', karte);\n            createElement(`Wohnungsnummer: ${mieter.wnr}`, 'div', karte);\n            createElement(`Kaltmiete: ${mieter.km}`, 'div', karte);\n        })\n\n    }\n}\n\nconst init = () => {\n    // ...\n\n    haus.allData(document.querySelector('#ausgabe'));\n}\n\ninit();"] }, { "frage": "Erstelle eine Methode, die einen neuen Mieter im Array anlegt.\nWenn die Wohnungsnummer schon existiert, soll der alte Mieter überschrieben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let haus = {\n    mieter: [],\n    mieterAnlegen(vname, nname, wnr, km) {\n        this.mieter\n            .filter(el => el.wnr == wnr)\n            .forEach(el => el.aktiv = false);\n        this.mieter.push({ vname, nname, wnr, km, aktiv: true });\n    }\n}\n\nconst init = () => {\n    haus.mieterAnlegen('Max', 'Mustermann', 2, 500);\n    haus.mieterAnlegen('Beate', 'Beispiel', 4, 350);\n    haus.mieterAnlegen('Alex', 'Anderson', 3, 380);\n    haus.mieterAnlegen('Julia', 'Janke', 1, 550);\n\n    haus.mieterAnlegen('Hans', 'Glück', 2, 400);\n\n    haus.allData(document.querySelector('#ausgabe'));\n}\n\ninit();"] }, { "frage": "Erstelle eine Methode, die einen Mieter im Array löscht.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let haus = {\n    // ...\n    mieterEntfernen(wnr) {\n        this.mieter\n            .filter(el => (el.wnr == wnr) && el.aktiv)\n            .forEach(el => el.aktiv = false);\n    }\n}\n\nconst init = () => {\n    // ...\n    haus.mieterEntfernen(4);\n    haus.mieterEntfernen(1);\n\n    haus.allData(document.querySelector('#ausgabe'));\n}"] }, { "frage": "Erstelle einen Server und speichere die Daten des Gebäudes in einer JSON-Datei.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Filmsammlung", "fragen": [{ "frage": "Erstelle einen Konstruktor / eine Klasse, der Objekte für Kinofilme anlegt.\nJedes Objekt soll die folgenden Informationen enthalten:\n<ul>\n    <li>Filmtitel</li>\n    <li>Regisseur</li>\n    <li>Laufzeit in Minuten</li>\n    <li>Erscheinungsjahr </li>\n</ul>\nVerwende diesen Konstruktor, um 4 Filme Deiner Wahl als Objekt anzulegen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// VARIABLEN\n        let personen = [], filmsammlung = [];\n\n        // FUNKTIONEN\n        const getNextID = sammlung => {\n            return sammlung.reduce((max, el) => Math.max(max, el.id), 0) + 1;\n        }\n        // Klassen\n        class Person {\n            constructor(vname, nname, sammlung = personen) {\n                this.vname = vname;\n                this.nname = nname;\n                this.id = getNextID(sammlung);\n            }\n        }\n        class Film {\n            constructor(titel, regie, laufzeit, erschienen, sammlung = filmsammlung) {\n                this.titel = titel;\n                this.regie = regie;\n                this.laufzeit = laufzeit;\n                this.erschienen = erschienen;\n                this.id = getNextID(sammlung);\n            }\n        }\n\n        // VARIABLEN\n        personen.push(new Person('Brian', 'de Palma'));\n        personen.push(new Person('Lana', 'Wachowsky'));\n        personen.push(new Person('Lilly', 'Wachowsky'));\n        personen.push(new Person('Tom', 'Tykwer'));\n        personen.push(new Person('Robert', 'Zemeckis'));\n\n        console.log(personen);\n\n        filmsammlung.push(new Film('Scarface', [0], 170, 1983));\n        filmsammlung.push(new Film('Matrix', [1, 2], 136, 1999));\n        filmsammlung.push(new Film('Cloud Atlas', [2, 3], 172, 2012));\n        filmsammlung.push(new Film('Cast Away', [4], 170, 1983));\n\n        console.log(filmsammlung);"] }, { "frage": "Erweitere den Konstruktor durch eine Methode, die das aktuelle Alter des Filmes per return liefert", "typ": "praxis", "schwierigkeit": 0, "antworten": ["class Film {\n            // ...\n            get alter(){\n                return new Date().getFullYear() - this.erschienen;\n            }\n        }"] }, { "frage": "Erweitere den Konstruktor für Kinofilme um ein Attribut, das den Cast enthält.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["\n        // VARIABLEN\n        let personen = [], filmsammlung = [];\n\n        // FUNKTIONEN\n        const getNextID = sammlung => {\n            return sammlung.reduce((max, el) => Math.max(max, el.id), 0) + 1;\n        }\n        // Klassen\n        class Person {\n            constructor(vname, nname, sammlung = personen) {\n                this.vname = vname;\n                this.nname = nname;\n                this.id = getNextID(sammlung);\n            }\n        }\n        class Film {\n            constructor(titel, regie, cast, laufzeit, erschienen, sammlung = filmsammlung) {\n                this.titel = titel;\n                this.regie = regie;\n                this.laufzeit = laufzeit;\n                this.erschienen = erschienen;\n                this.cast = cast;\n                this.id = getNextID(sammlung);\n            }\n            get alter() {\n                return new Date().getFullYear() - this.erschienen;\n            }\n        }\n\n        // VARIABLEN\n        personen.push(new Person('Brian', 'de Palma'));\n        personen.push(new Person('Lana', 'Wachowsky'));\n        personen.push(new Person('Lilly', 'Wachowsky'));\n        personen.push(new Person('Tom', 'Tykwer'));\n        personen.push(new Person('Robert', 'Zemeckis'));\n        personen.push(new Person('Tom', 'Hanks'));\n        personen.push(new Person('Halle', 'Berry'));\n        personen.push(new Person('Hugo', 'Weaving'));\n        personen.push(new Person('Keanu', 'Reeves'));\n        personen.push(new Person('Carrie-Anne', 'Moss'));\n        personen.push(new Person('Al', 'Pacino'));\n        personen.push(new Person('Michelle', 'Pfeiffer'));\n\n        console.log(personen);\n\n        filmsammlung.push(new Film('Scarface', [0], [11, 12], 170, 1983));\n        filmsammlung.push(new Film('Matrix', [1, 2], [9, 10], 136, 1999));\n        filmsammlung.push(new Film('Cloud Atlas', [2, 3], [6, 7, 8], 172, 2012));\n        filmsammlung.push(new Film('Cast Away', [4], [6], 170, 1983));\n\n        console.log(filmsammlung);\n\n        console.log(filmsammlung[0].alter);"] }, { "frage": "Erstelle weitere Konstruktoren für die Speicherung von Dokumentationen und Urlaubsfilmen", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// VARIABLEN\n        let personen = [], filmsammlung = [];\n\n        // FUNKTIONEN\n        const getNextID = sammlung => {\n            return sammlung.reduce((max, el) => Math.max(max, el.id), 0) + 1;\n        }\n        // Klassen\n        class Person {\n            constructor(vname, nname, sammlung = personen) {\n                this.vname = vname;\n                this.nname = nname;\n                this.id = getNextID(sammlung);\n            }\n        }\n        class Film {\n            constructor(titel, laufzeit, erschienen, sammlung = filmsammlung) {\n                this.titel = titel;\n                this.laufzeit = laufzeit;\n                this.erschienen = erschienen;\n                this.id = getNextID(sammlung);\n            }\n            get alter() {\n                return new Date().getFullYear() - this.erschienen;\n            }\n        }\n        class Kinofilm extends Film {\n            constructor(titel, regie, cast, laufzeit, erschienen, sammlung = filmsammlung) {\n                super (titel, laufzeit, erschienen, sammlung );\n                this.regie = regie;\n                this.cast = cast;\n            }\n        }\n        class Doku extends Film {\n            constructor(titel, thema, laufzeit, erschienen, sammlung = filmsammlung) {\n                super (titel, laufzeit, erschienen, sammlung );\n                this.thema = thema;\n            }\n        }\n        class Urlaubsfilm extends Film {\n            constructor(titel, ort, laufzeit, erschienen, sammlung = filmsammlung) {\n                super (titel, laufzeit, erschienen, sammlung );\n                this.ort = ort;\n            }\n        }\n\n        // VARIABLEN\n        personen.push(new Person('Brian', 'de Palma'));\n        personen.push(new Person('Lana', 'Wachowsky'));\n        personen.push(new Person('Lilly', 'Wachowsky'));\n        personen.push(new Person('Tom', 'Tykwer'));\n        personen.push(new Person('Robert', 'Zemeckis'));\n        personen.push(new Person('Tom', 'Hanks'));\n        personen.push(new Person('Halle', 'Berry'));\n        personen.push(new Person('Hugo', 'Weaving'));\n        personen.push(new Person('Keanu', 'Reeves'));\n        personen.push(new Person('Carrie-Anne', 'Moss'));\n        personen.push(new Person('Al', 'Pacino'));\n        personen.push(new Person('Michelle', 'Pfeiffer'));\n\n        console.log(personen);\n\n        filmsammlung.push(new Kinofilm('Scarface', [0], [11, 12], 170, 1983));\n        filmsammlung.push(new Kinofilm('Matrix', [1, 2], [9, 10], 136, 1999));\n        filmsammlung.push(new Kinofilm('Cloud Atlas', [2, 3], [6, 7, 8], 172, 2012));\n        filmsammlung.push(new Kinofilm('Cast Away', [4], [6], 170, 1983));\n        filmsammlung.push(new Doku('Calculating Ada', 'Mathematik', 58, 2019));\n        filmsammlung.push(new Urlaubsfilm('Mallorca Cool', 'Mallorca', 45, 2014));\n\n        console.log(filmsammlung);\n\n        console.log(filmsammlung[0].alter);"] }] }] }, { "name": "Iteratoren", "parts": [{ "name": "Array iterieren", "fragen": [{ "frage": "Lege ein Array mit 1000 zufälligen Zahlen an.\nMit einem Iterator soll für jede Zahl ein neues DOM-Element erzeugt und auf der Webseite angezeigt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let zahlen = [...new Array(1000)].map(() => ~~(Math.random() * 100));\nlet iter = zahlen.values();\n\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    eltern = ausgabe,\n    typ = 'div',\n} = {}) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nlet i;\nwhile (!(i = iter.next()).done) {\n    DOMElementAnlegen({\n        inhalt: i.value\n    });\n}"] }, { "frage": "Lege zusätzlich einen Button an. Jedes Mal, wenn der Button geklickt wird, soll in einem neuen Div-Container die jeweils nächste Zahl aus dem Array angezeigt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const btnNext = document.querySelector('#btnNext');\n\nlet zahlen = [...new Array(1000)].map(() => ~~(Math.random() * 100));\nlet iter = zahlen.values();\n\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    eltern = ausgabe,\n    typ = 'div',\n} = {}) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nbtnNext.addEventListener('click', () => {\n    DOMElementAnlegen({\n        inhalt: iter.next().value\n    });\n})"] }, { "frage": "Am Ende soll der Button verschwinden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const btnNext = document.querySelector('#btnNext');\n\nlet zahlen = [...new Array(5)].map(() => ~~(Math.random() * 100));\nlet iter = zahlen.values();\nlet next = iter.next();\n\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    eltern = ausgabe,\n    typ = 'div',\n} = {}) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nbtnNext.addEventListener('click', () => {\n    DOMElementAnlegen({\n        inhalt: next.value\n    });\n    next = iter.next();\n\n    if (next.done) {\n        btnNext.setAttribute('disabled', true);\n    }\n})"] }] }, { "name": "Generator Array", "fragen": [{ "frage": "Erstelle einen Generator, der alle Elemente eines Arrays sortiert iteriert. Unabhängig davon, wie das Array anfangs sortiert ist.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let data = [21,98,69,57,2,3,5,2,3,542,6,52,84];\n\nconst genDataSorted = function*(sammlung){\n    sammlung = [...sammlung];\n    sammlung.sort((a,b) => a-b);\n    for ( let el of sammlung){\n        yield el;\n    }\n}\n\nlet iterSammlung = genDataSorted(data);\n\nlet el;\nwhile(!(el = iterSammlung.next()).done){\n    console.log( el.value );\n}"] }, { "frage": "Erstelle einen Generator, der ein Array rückwärts iteriert", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let data = [21,98,69,57,2,3,5,2,3,542,6,52,84];\n\nconst genDataSorted = function*(sammlung){\n    sammlung = [...sammlung];\n    sammlung.sort((a,b) => b-a);\n    for ( let el of sammlung){\n        yield el;\n    }\n}\n\nlet iterSammlung = genDataSorted(data);\n\nlet el;\nwhile(!(el = iterSammlung.next()).done){\n    console.log( el.value );\n}"] }] }, { "name": "Generator Object", "fragen": [{ "frage": "Erstelle einen Generator, der alle Attribute eines Objektes iteriert.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let genObjekt = function* (objekt) {\n    console.log(objekt);\n\n    for (let key in objekt) {\n        yield {\n            key: key,\n            val: objekt[key]\n        }\n    }\n}\n\n//let iter = genObjekt({ a: 1, b: 2, c: 3 });\nlet iter = genObjekt(document.querySelector('#ausgabe'));\n\nlet el;\nwhile (!(el = iter.next()).done) {\n    console.log(el.value.key, el.value.val);\n}"] }, { "frage": "Erstelle einen Generator, der alle Attribute eines Objektes außer den Methoden iteriert.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let genObjekt = function* (objekt) {\n    console.log(objekt);\n\n    for (let key in objekt) {\n        if (typeof objekt[key] != 'function')\n            yield {\n                key: key,\n                val: objekt[key]\n            }\n    }\n}\n\n//let iter = genObjekt({ a: 1, b: 2, c: 3 });\nlet iter = genObjekt(document.querySelector('#ausgabe'));\n\nlet el;\nwhile (!(el = iter.next()).done) {\n    console.log(el.value.key, el.value.val);\n}"] }, { "frage": "Erstelle einen Generator, der alle Attribute eines DOM-Objektes außer den Methoden und den Eventlisteners.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let genObjekt = function* (objekt) {\n    console.log(objekt);\n\n    for (let key in objekt) {\n        if (typeof objekt[key] != 'function' && !key.startsWith('on'))\n            yield {\n                key: key,\n                val: objekt[key]\n            }\n    }\n}\n\n//let iter = genObjekt({ a: 1, b: 2, c: 3 });\nlet iter = genObjekt(document.querySelector('#ausgabe'));\n\nlet el;\nwhile (!(el = iter.next()).done) {\n    console.log(el.value.key, el.value.val);\n}"] }] }, { "name": "Lfd Nummer", "fragen": [{ "frage": "Erstelle einen Generator, der eine laufende Nummer ausgibt.\nEs soll kein Ende geben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let meinGenerator = function* () {\n    let i = 0;\n    while (true) {\n        yield i++;\n    }\n}\n\nlet meinIterator = meinGenerator();\n\nbtnNext.addEventListener('click', () => {\n    console.log( meinIterator.next().value );\n})"] }, { "frage": "Erstelle einen Generator, der bei jedem Aufruf die nächste Primzahl ausgibt\nEs soll kein Ende geben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const isPrime = zahl => {\n    for (let i = 2; (i * i) <= zahl; i++) {\n        if (!(zahl % i)) return false;\n    }\n    return true\n}\n\nlet meinGenerator = function* () {\n    let i = 2;\n    while (true) {\n        if (isPrime(i)) yield i;\n        i++;\n    }\n}\n\nlet meinIterator = meinGenerator();\n\nbtnNext.addEventListener('click', () => {\n    console.log(meinIterator.next().value);\n})"] }] }] }, { "name": "Maps / Sets", "parts": [{ "name": "Undostack", "fragen": [{ "frage": "Auf der Webseite sollen beliebig viele Elemente mit Textarea und Undo-Knopf liegen.\nWenn der Knopf geklickt wird, soll die letzte Eingabe zurückgenommen werden. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n    // Variablen\n    let eingabeElemente = document.querySelectorAll('.eingabe');\n    let elementdaten = new Map();\n\n    // FUNKTIONEN\n    const init = () => {\n        eingabeElemente.forEach(el => {\n            let ta = el.querySelector('textarea');\n            let btn = el.querySelector('button');\n\n            // Undo-Stack (und ggf. anderes) anlegen\n            elementdaten.set(el, {\n                undo: ''\n            })\n\n            // Undo-Schritt eintragen\n            ta.addEventListener('keydown', evt => {\n                if (evt.key != 'Shift' &&\n                    evt.key != 'Control' &&\n                    evt.key != 'Alt'\n                ) {\n                    elementdaten.get(el).undo = ta.value;\n                };\n\n            })\n\n            // Undo-Button\n            btn.addEventListener('click', evt => {\n                ta.value = elementdaten.get(el).undo;\n            })\n\n\n        })\n        console.log(elementdaten);\n\n    }\n\n    // INIT\n    init();\n\n});"] }, { "frage": "Der Button soll mehrfach geklickt werden können und bei jedem Schritt wird im Undo-Stack ein Schritt zurückgenommen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["document.addEventListener(\"DOMContentLoaded\", evt => {\n\n    // Variablen\n    let eingabeElemente = document.querySelectorAll('.eingabe');\n    let eingaben = document.querySelector('#eingaben');\n    let elementdaten = new Map();\n    let ignoreKeys = 'Shift Control Alt ArrowLeft ArrowRight ArrowUp ArrowDown'.split(' ');\n\n\n    let texte = [\n        'Er hörte leise Schritte hinter sich. Das bedeutete nichts Gutes.',\n        'Wer würde ihm schon folgen, spät in der Nacht und dazu noch in dieser engen Gasse mitten im übel beleumundeten Hafenviertel?',\n        'Gerade jetzt, wo er das Ding seines Lebens gedreht hatte und mit der Beute verschwinden wollte!',\n        'Hatte einer seiner zahllosen Kollegen dieselbe Idee gehabt, ihn beobachtet und abgewartet, um ihn nun um die Früchte seiner Arbeit zu erleichtern?'\n    ]\n\n    // FUNKTIONEN\n    // Debouncing wird erst durchgeführt, wenn nach einer Wartezwit (delay)\n    // Die Funktion kein weiteres Mal angestoßen wird\n    const debounce = (dieFunktion, delay) => {\n        let warte;\n        return evt => {\n            let puffer = evt.target.value;\n            clearTimeout(warte);\n            warte = setTimeout(\n                () => dieFunktion(evt, puffer),\n                delay\n            )\n        }\n    }\n\n\n    const DOMElementAnlegen = ({\n        inhalt = '',\n        typ = 'div',\n        eltern = ausgabe,\n        klassen = [],\n        attr = {},\n        listeners = {},\n        styles = {},\n        amEnde = true,\n    } = {}) => {\n        let neu = document.createElement(typ);\n        if (inhalt) neu.innerHTML = inhalt;\n        if (klassen.length) neu.className = klassen.join(' ');\n\n        Object.entries(attr).forEach(el => neu.setAttribute(...el));\n        Object.entries(listeners).forEach(el => neu.addEventListener(...el));\n        Object.entries(styles).forEach(style => neu.style[style[0]] = style[1]);\n\n        console.log(eltern);\n\n\n        if (!amEnde && eltern.children.length) eltern.insertBefore(neu, eltern.children[0]);\n        else eltern.append(neu);\n\n        return neu;\n    }\n\n    const templateEingabeelement = (inhalt = '', eltern = eingaben) => {\n        let container = DOMElementAnlegen({\n            eltern,\n            klassen: ['eingabe']\n        })\n\n        // Undo-Stack (und ggf. anderes) anlegen\n        elementdaten.set(container, {\n            undostack: []\n        })\n\n        // Textarea\n        let ta = DOMElementAnlegen({\n            typ: 'textarea',\n            eltern: container,\n            inhalt,\n            listeners: {\n                // Undo-Schritt eintragen\n                keydown: debounce(tastenanschlag, 200)\n            }\n        })\n\n        // Button\n        DOMElementAnlegen({\n            typ: 'button',\n            eltern: container,\n            inhalt: 'Undo',\n            listeners: {\n                click(evt) {\n                    let undo = elementdaten.get(container).undostack;\n                    console.log(undo);\n\n                    if (undo.length) {\n                        ta.value = undo.splice(undo.length - 1, 1)[0];\n                    }\n                }\n            }\n        })\n    }\n\n    const tastenanschlag = (evt, puffer) => {\n        if (!ignoreKeys.includes(evt.key)) {\n            elementdaten.get(evt.target.parentNode).undostack.push(puffer);\n        };\n    }\n\n    const init = () => {\n        texte.forEach(text => {\n            templateEingabeelement(text)\n        })\n    }\n\n    // INIT\n    init();\n\n});"] }] }, { "name": "Statistik", "fragen": [{ "frage": "Schreibe ein Programm, das eine Million zufällige Zahlen erzeugt.\nIn einer Map sollen diese für eine Statistik über die zufälligen Zahlen geführt werden. Der Schlüssel soll die zufällig erzeugte Zahl sein, der Wert soll die Anzahl sein, wie oft diese Zahl erzeugt wurde.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// FUNKTIONEN\nlet zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nlet zahlen = new Map();\nfor (let i = 1; i <= 100; i++) {\n    zahlen.set(i, 0);\n}\n\nfor (let i = 0; i < 1e6; i++) {\n    let z = zufallErzeugen(1, 100);\n    zahlen.set(z, zahlen.get(z) + 1);\n}\n\nconsole.log( zahlen );"] }, { "frage": "Die Map soll nach Schlüssel sortiert ausgegeben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// FUNKTIONEN\nlet zufallErzeugen = (min, max) => ~~(Math.random() * (max - min + 1) + min);\n\nlet zahlen = new Map();\nfor (let i = 1; i <= 100; i++) {\n    zahlen.set(i, 0);\n}\n\nfor (let i = 0; i < 1e6; i++) {\n    let z = zufallErzeugen(1, 100);\n    zahlen.set(z, zahlen.get(z) + 1);\n}\n\nzahlen.forEach((el, i) => {\n    let neu = document.createElement('div');\n    neu.innerHTML = `${i}: ${el}`;\n    document.body.append(neu);\n});"] }, { "frage": "Zeichne ein Balkendiagramm auf Basis von DIV-Containern. ", "typ": "praxis", "schwierigkeit": 0, "antworten": ["Das kriegst Du selbst hin"] }] }] }, { "name": "DOM", "parts": [{ "name": "Elemente Organisieren!", "fragen": [{ "frage": "Lege ein neues DOM-Element an. Es soll als Inhalt den String 'Hallo welt' enthalten.\nDas Element soll die Klasse 'inhalt' enthalten und im document.body eingehängt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let inhalt = `\n    &lt;div class=\"inhalt\"&gt;\n        Hallo Welt\n    &lt;/div&gt;\n`;\ndocument.body.innerHTML += inhalt;", "let inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\n\ndocument.body.append(inhalt);"] }, { "frage": "Erzeuge ein weiteres DOM-Element mit der ID 'ausgabe', in welches das Element aus der vorigen Aufgabe eingehängt wird.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let inhalt = `\n    &lt;div id=\"ausgabe\"&gt;\n        &lt;div class=\"inhalt\"&gt;\n            Hallo Welt\n        &lt;/div&gt;\n    &lt;/div&gt;\n`;\ndocument.body.innerHTML += inhalt;", "let ausgabe = document.createElement('div');\nausgabe.id = 'ausgabe';\ndocument.body.append(ausgabe);\n\nlet inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\nausgabe.append(inhalt);"] }, { "frage": "Ausgehend von der vorigen Aufgabe: Lege ein weiteres DOM-Element mit der ID 'content' an. \nVerschiebe alle Elemente aus der ID 'ausgabe' in die ID 'content'.\n", "typ": "praxis", "schwierigkeit": 0, "antworten": ["\nlet ausgabe = document.createElement('div');\nausgabe.id = 'ausgabe';\ndocument.body.append(ausgabe);\n\nlet inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\nausgabe.append(inhalt);\n\nlet content = document.createElement('div');\ndocument.body.append(content);\ncontent.id = 'content';\n\n[...ausgabe.children].forEach(el => content.append(el))"] }, { "frage": "Ausgehend von der vorigen Aufgabe: Entferne das Element mit der ID 'ausgabe'", "typ": "praxis", "schwierigkeit": 0, "antworten": ["let ausgabe = document.createElement('div');\nausgabe.id = 'ausgabe';\ndocument.body.append(ausgabe);\n\nlet inhalt = document.createElement('div');\ninhalt.innerHTML = 'Hallo Welt';\ninhalt.className = 'inhalt';\nausgabe.append(inhalt);\n\nlet content = document.createElement('div');\ndocument.body.append(content);\ncontent.id = 'content';\n\n[...ausgabe.children].forEach(el => content.append(el))\n\nausgabe.remove();"] }] }, { "name": "Inhalte ausgeben", "fragen": [{ "frage": "Lege ein Array mit 20 zufälligen Zahlen an.\nErzeuge für jedes Attribut aus dem Array ein p-Tag an.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// VARIABLEN\nlet a = [...new Array(20)].map(() => ~~(Math.random() * 100));\n\n// FUNKTIONEN\nconst createDOMElement = (inhalt, typ = 'div', eltern = document.body) => {\n    let neu = document.createElement(typ);\n    neu.innerHTML = inhalt;\n    eltern.append(neu);\n}\n\nconst init = () => {\n    a.forEach(el => createDOMElement(el));\n}\n\n// INIT\ninit();"] }, { "frage": "Gib allen p-Tags, deren Inhalt größer ist als 50, die Klasse 'rot'.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// VARIABLEN\nlet a = [...new Array(20)].map(() => ~~(Math.random() * 100));\n\n// FUNKTIONEN\n// Named Attributes\nconst createDOMElement = ({\n    inhalt,\n    typ = 'p',\n    eltern = document.body,\n    klassen = []\n}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    if (klassen.length) neu.className = klassen.join(' ');\n    eltern.append(neu);\n}\n\nconst init = () => {\n    a.forEach(el => {\n        if (el > 50) createDOMElement({ inhalt: el, klassen: ['rot'] });\n        else createDOMElement({ inhalt: el });\n    });\n}\n\n// INIT\ninit();"] }, { "frage": "Erzeuge ein weiteres DOM-Element, in welchem die Anzahl der p-Tags angezeigt wird.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// VARIABLEN\nlet a = [...new Array(20)].map(() => ~~(Math.random() * 100));\n\n// FUNKTIONEN\n// Named Attributes\nconst createDOMElement = ({\n    inhalt,\n    typ = 'p',\n    eltern = document.body,\n    klassen = []\n}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    if (klassen.length) neu.className = klassen.join(' ');\n    eltern.append(neu);\n}\n\nconst init = () => {\n    a.forEach(el => {\n        if (el > 50) createDOMElement({ inhalt: el, klassen: ['zahl', 'rot'] });\n        else createDOMElement({ inhalt: el, klassen: ['zahl'] });\n    });\n    createDOMElement({\n        inhalt: `Anzahl: ${[...document.querySelectorAll('.zahl')].length}`,\n        klassen:['anzahl']\n    })\n}\n\n// INIT\ninit();"] }] }, { "name": "Automatisierung", "fragen": [{ "frage": "Lege eine Funktion an, welche ein neues DOM-Element anlegt. Diese Funktion bekommt alle Informationen (Inhalt, Typ, Klasse(n), Eltern, etc) als Parameter übergeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["const DOMElementAnlegen = ({\n    inhalt = '',\n    typ = 'div',\n    eltern = ausgabe,\n    klassen = [],\n    attr = {},\n    listeners = {},\n    styles = {},\n    amEnde = true,\n} = {}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    if (klassen.length) neu.className = klassen.join(' ');\n\n    Object.entries(attr).forEach(el => neu.setAttribute(...el));\n    Object.entries(listeners).forEach(el => neu.addEventListener(...el));\n    Object.entries(styles).forEach(style => neu.style[style[0]] = style[1]);\n\n    console.log(eltern);\n\n\n    if (!amEnde && eltern.children.length) eltern.insertBefore(neu, eltern.children[0]);\n    else eltern.append(neu);\n\n    return neu;\n}"] }, { "frage": "Lege eine weitere Funktion an, welche ein Array übergeben bekommt.\nDiese soll für jedes Attribut ein neues DOM-Element anlegen.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// VARIABLEN\nlet a = [...new Array(20)].map(() => ~~(Math.random() * 100));\n\n// FUNKTIONEN\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    typ = 'div',\n    eltern = document.body,\n    klassen = [],\n    attr = {},\n    listeners = {},\n    styles = {},\n    amEnde = true,\n} = {}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    if (klassen.length) neu.className = klassen.join(' ');\n\n    Object.entries(attr).forEach(el => neu.setAttribute(...el));\n    Object.entries(listeners).forEach(el => neu.addEventListener(...el));\n    Object.entries(styles).forEach(style => neu.style[style[0]] = style[1]);\n\n    if (!amEnde && eltern.children.length) eltern.insertBefore(neu, eltern.children[0]);\n    else eltern.append(neu);\n\n    return neu;\n}\n\nconst init = () => {\n    \n    a.forEach(el => DOMElementAnlegen({\n        inhalt: el\n    }));\n}\n\n// INIT\ninit();"] }] }, { "name": "Erzeugen bei Click", "fragen": [{ "frage": "Lege einen Button an.\nWenn der Button gedrückt wird, soll ein neues DOM-Element angelegt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// FUNKTIONEN\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    typ = 'div',\n    eltern = document.body,\n} = {}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    eltern.append(neu);\n    return neu;\n}\n\nconst init = () => {\n    btnNext.addEventListener('click', () => {\n        DOMElementAnlegen({\n            inhalt: ~~(Math.random() * 100),\n        })\n    })\n}\n\n// INIT\ninit();"] }, { "frage": "Das neu erzeugte DOM-Element soll automatisch nach zwei Sekunden verschwinden.", "typ": "praxis", "schwierigkeit": 0, "antworten": ["// FUNKTIONEN\nconst DOMElementAnlegen = ({\n    inhalt = '',\n    typ = 'div',\n    eltern = document.body,\n} = {}) => {\n    let neu = document.createElement(typ);\n    if (inhalt) neu.innerHTML = inhalt;\n    eltern.append(neu);\n    return neu;\n}\n\nconst init = () => {\n    btnNext.addEventListener('click', () => {\n        let element = DOMElementAnlegen({\n            inhalt: ~~(Math.random() * 100),\n        })\n        setTimeout(\n            () => element.remove(),\n            2000\n        )\n    })\n}\n\n// INIT\ninit();"] }] }] }, { "name": "Canvas", "parts": [{ "name": "Kästen", "fragen": [{ "frage": "Zeichne einen Kasten im Canvas.\nDieser Kasten soll halb so hoch und halb so breit wie der Canvas sein. \nDer Kasten soll horizontal und vertikal zentriert sein.\nDer Kasten soll mit einem Blaugrau gefüllt sein.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Verteile auf dem Canvas 100 quadratische Kästen mit zufälliger Positionierung.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zeichne alle 30ms 100 zufällige Quadrate auf einem leeren Canvas.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Lege einen Canvas an.\nWenn sich die Maus über den Canvas bewegt, soll an die jeweilige Mausposition ein neuer Kasten gezeichnet werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wie oben, aber der Kasten soll nur gezeichnet werden, wenn die Maustaste gesrückt ist.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Schachbrett", "fragen": [{ "frage": "Zeichne ein quadratisches Canvas.\nZeichne auf dem Canvas ein Schachbrettmuster, so dass alle Felder 20px breit und ebenso hoch sind.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wie oben, aber das Schachbrett soll horizontal wie vertikal 8 Felder groß sein.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Kurven", "fragen": [{ "frage": "Zeichne auf dem Canvas eine grüne Sinuskurve.\nDie Kurve soll auf einem Koordinatenkreuz liegen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Schreibe eine Skala auf die Achsen, welche die Gradzahlen in 45er-Schritten darstellt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Überlagere die Sinuskurve mit einem Rauschen.\nDas Rauschen soll animiert sein.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Schnee", "fragen": [{ "frage": "Lass es auf dem Canvas schneien.\nBenutze dazu das Bild schnee.png auf dem Datenaustausch.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Jede Schneeflocke soll mit einer individuellen Geschwindigkeit fallen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Jede Schneeflocke soll mit einer individuellen Geschwindigkeit seitwärts abgelenkt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Jede Schneeflocke soll eine zufällige Größe haben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Für jede Schneeflocke soll ein zufälliger Ausschnitt aus dem Spritesheet schnee_sprite.png genommen werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Knöpfe abprallen", "fragen": [{ "frage": "Zeichne auf dem Canvas das Bild 'knopf.png'. \nDieses Bild soll sich auf dem Canvas bewegen und von den Kanten abprallen.\nWährend der Bewegung soll soll sich der Knopf drehen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Statt eines Knopfes, zeichne 10 Knöpfe.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Die Knöpfe sollen verschwinden, wenn sie angeklickt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Die Knöpfe sollen voneinander abprallen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Diagramm", "fragen": [{ "frage": "Lege einen Array an und fülle ihn mit 20 Werten zwischen 10 und 5000.\nZeichne dann ins Canvas ein Balkendiagramm, welches die Werte darstellt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Die Füllfarbe soll für den höchsten Wert rot sein, für den niedrigsten grün und für alle anderen soll die Farbe dem Wert entsprechend zwischen rot und grün liegen. ", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wenn die Maus auf einen der Balken rollt, soll das Wert dieses Balken angezeigt werden.\nDer Balken soll hervorgehoben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Statt eines Balkendiagramms zeichne ein Liniendiagramm.\nDie Datenpunkte sollen mit einem Kreis hervorgehoben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Statt des Liniendiagramms zeichne ein Tortendiagramm.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }, { "name": "Promises", "parts": [{ "name": "Basic", "fragen": [{ "frage": "Gestalte einen Promise, der drei Sekunden wartet und dann ein Element Deiner Wahl im DOM erzeugt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Der Promise soll von einem Button getriggert werden.\nMit jedem Klick auf den Button soll ein neues DOM-Element erzeugt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Gestalte einen Promise, der die Summe eines übergebenen Arrays zurückgibt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Prim", "fragen": [{ "frage": "Gestalte einen Promise, der eine Zahl darauf prüft, ob es sich um eine Primzahl handelt. \nDie Resolve- und Reject-Funktionen sollen eine entsprechende Ausgabe generieren.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Gestalte einen Promise, der die ersten x Primzahlen erzeugt. \nDiese sollen in einer Liste auf der Seite dargestellt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Netzwerktechnik", "fragen": [{ "frage": "Gestalte einen Promise, der eine DNS-Abfrage (DNS-Modul) nach einer Domain stellt.\nDie Antwort soll in der Resolve-Funktion ausgegeben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }, { "name": "Node", "parts": [{ "name": "Basic", "fragen": [{ "frage": "Lass im Terminal den Text 'Hallo Welt' ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Lege eine Variable mit einem Wert Deiner Wahl an.\nLass diese Variable in der Konsole ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erzeuge ein Array mit 100 Speicherstellen und fülle dies mit zufälligen Zahlen.\nLass dann das ganze Array im Terminal ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Eigenes Modul", "fragen": [{ "frage": "Schreibe dein eigenes Modul, das die folgenden Methoden zur Verfügung stellt:\n<ul>\n<li>Erzeugen einer zufälligen Zahl mit einer per Parameter definierbaren Anzahl an Nachkommastellen</li>\n<li>Mathematisches Runden einer beliebigen Zahl mit einer per Parameter definierbaren Anzahl an Nachkommastellen</li>\n<li>Eine Klasse, die ein Objekt anlegt, das alle relavten Informationen zu einer Person enthält (Vorname, Nachname, Adresse, Kontaktdaten)</li>\n</ul>", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Express", "fragen": [{ "frage": "Erzeuge einen Webserver mithilfe des Moduls Express.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Gestalte eine Webseite mit einem Texteingabefeld und einem Button.\nDer Benutzer soll in das Eingabefeld einen Dateinamen eingeben. Diese Datei soll dann vom Server geladen werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erstelle eine Webseite mit zwei Eingabefeldern und einem Button.\nWenn der Button geklickt wird, werden die Eingaben an den Server gesendet. Dieser multipliziert die Werte und gibt das Ergebnis zurück.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "CMS", "fragen": [{ "frage": "Lade eine Textdatei und lass den Inhalt in einem DOM-Element ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erstelle eine Seite mit einem Eingabe-Textfeld und einem Button.\nDer Benutzer soll in das Textfeld eingeben, welche Datei geladen werden soll.\nBei Betätigung des Buttons soll die Datei geladen und ihr Inhalt in einem Div-Container ausgegeben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erstelle eine Seite mit einem Textarea und einem Button. Wenn der Button gedrückt wird, dann wird der Inhalt an den Server gesendet und dort gespeichert.\nErstelle eine weitere Seite, auf der die vorher gespeicherten Inhalte dargestellt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Fileupload", "fragen": [{ "frage": "Erstelle eine Seite mit einem File-Upload.\nDie Dateien sollen auf den Server übertragen und in den Ordner &lt;i&gt;public/uploads&lt;/i&gt; geschrieben werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zusätzlich soll eine JSON-Datei beschrieben werden, in welcher vermerkt wird, welche Datei welchen ursprünglichen Namen hatte.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Nach dem Upload-Prozess sollen im Client alle hochgeladenen Dateien als Link zum Download dargestellt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Websocket", "fragen": [{ "frage": "Mehrere Benutzer sollen mit einem Server verbunden sein.\nFür jeden Benutzer soll ein Kreis im Browser zu sehen sein.\nWenn ein Benutzer die Pfeil-Tasten betätigt, soll sich der zu ihm gehörige Kreis auf allen Browsern entsprechend bewegen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Chat", "fragen": [{ "frage": "Erstelle ein Chat-Programm.\nJeder Benutzer bekommt alle Nachrichten der anderen Benutzer zu sehen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zusätzlich soll jeder Benutzer seinen Namen angeben können.\nDieser Name wird mit übertragen und bei den anderen Benutzern angezeigt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zusätzlich soll jeder Benutzer eine Farbe wählen können.\nBei den Nachrichten wird dessen Name mit dieser Farbe hinterlegt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zusätzlich sollen alle Nachrichten in einer Datenbank abgelegt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zusätzlich soll mit einem Button der bisherige Chatverlauf aus der Datenbank gelesen werden können.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wann immer ein Client seinen Namen ändert, soll diese Änderung bei allen angezeigt werden", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zusätzlich soll der Benutzer eine Liste aller aktuell angemeldeten Benutzer sehen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Zusätzlich soll ein Benutzer einem anderen eine persönliche Nachricht schicken können, die niemand sonst sieht.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }, { "name": "React", "parts": [{ "name": "Komponenten", "fragen": [{ "frage": "Erzeuge eine Komponente, die in einem H2-Container einen Text Deiner Wahl ausgibt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erzeuge eine weitere Komponente, die unter der Überschrift einen DIV-Container mit einem Inhalt Deiner Wahl ausgibt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Statt eines einfachen Textes sollen in dem Div-Container vier p-Tags mit jeweils einem Text Deiner Wahl stehen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Nach den p-Tags soll eine nummerierte Liste mit Inhalt Deiner Wahl stehen. Jedes li-Element soll aus einer Komponente erzeugt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Klick mich", "fragen": [{ "frage": "In einer Komponente, die einen Div-Container erzeugt, soll ein Text Deiner Wahl stehen. Innerhalb dieses Textes soll ein span-Element sein.\nDieses span-Element soll bei Klick ein Alert-Fenster öffnen, das den Inhalt des span-Elementes anzeigt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wie oben, aber die Komponente soll einen Counter enthalten. Dieser wird bei Klick hochgezählt und der Zählerstand soll im Button angezeigt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wie oben, aber bei jedem Klick soll ein neues DOM-Element eingehängt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erzeuge eine Komponente, in der in jeder Sekunde ein neues p-tag angelegt wird.\nIn diesen p-Tags steht eine laufende Nummer.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "... und AJAX", "fragen": [{ "frage": "Lade per Ajax eine Text-Datei.\nDer Inhalt der Text-Datei soll an Zeilenumbrüchen (\\n) aufgeteilt werden und jeder Absatz in einer eigenen p-Tag-Komponente dargestellt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }, { "name": "Vue", "parts": [{ "name": "Eigene Direktiven", "fragen": [{ "frage": "Erzeuge eine eigene Direktive, die den Inhalt eines DOM-Elementes umdreht.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erzeuge eine Direktive, die für ein Textarea anzeigt: wieviele Zeichen geschrieben wurden und wieviele bis zu einem Maximum noch geschrieben werden können.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erzeuge eine Direktive, die es erlaubt, Kommentare zu einem Div-Element zu schreiben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Klick mich", "fragen": [{ "frage": "Erzeuge eine Seite mit einem Knopf. Wenn der Knopf angeklickt wird, soll ein Zähler hochgezählt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wie oben, aber wenn der Knopf gedrückt wird, soll ein neues Element erzeugt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }, { "name": "CouchDB", "parts": [{ "name": "Städte", "fragen": [{ "frage": "Lege im CouchDB-Backend unter http://localhost:5984/_utils/ eine Datenbank an, in der Informationen über verschiedene Städte angelegt werden. Trage in diese Datenbank Informationen zu zwei Städten ein. Diese Informationen sollen enthalten:\n<ul>\n<li>Name der Stadt</li>\n<li>Kennzeichen</li>\n<li>Land</li>\n<li>Einwohner</li>\n</ul>", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Lies die Daten der Städte per NodeJS aus der Datenbank aus und lass sie im Terminal ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Trage mit NodeJS eine weitere Stadt in die Datenbank ein und lass die Sammlung ausgeben.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Lege eine HTML-Datei an, die im Browser die Datensammlung anzeigt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erweitere die HTML Seite um eine Suche nach Stadtnamen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }, { "name": "Mini-Projekte", "parts": [{ "name": "Datenbank", "fragen": [{ "frage": "Schreibe ein Programm, das die gesamte Couch-DB als JSON exportiert.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erweitere das Programm so, dass die JSON-Datei wieder in die CouchDB importiert werden kann.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erweitere das Programm so, dass vor dem Export angegeben werden kann, welche Datenbanken exportiert werden sollen.  ", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Kontaktformular", "fragen": [{ "frage": "Gestalte eine Webseite mit einem Kontaktformular.\nDieses Kontaktformular soll auf Gültigkeit verifiziert werden.\nDer 'Absenden'-Knopf darf erst funktionieren, wenn alle Bedingungen erfüllt sind.\nDie folgenden Daten sollen geprüft werden:\n\n    Alle Eingabefelder, die mit der Klasse 'mandatory' belegt sind, müssen Inhalt haben.\n    Die Postleitzahl muss eine 5-stellige Zahl sein.\n    Die Telefonnummer darf nur aus Zahlen, Leerstellen, Bindestrich und Schrägstrich bestehen.\n    Wenn die Vorwahl mit einer einzigen '0' beginnt, dann soll diese '0' entfernt werden und die internationale Vorwahl für Deutschland (+49) eingefügt werden.\n    Die E-Mail-Adresse muss gültig sein (@, TLD, Punkte).\n    Die Webadresse muss gültig sein (Protokoll, TLD).\n    Der Knopf 'AGB akzeptiert' muss angehakt sein. \n\nFelder, die diesen Vorgaben nicht entsprechen, sollen rot umrandet werden und mit einem Hinweistext versehen werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Drag 'n' Drop", "fragen": [{ "frage": "Erzeuge einen Div-Container, der sich anfassen und verschieben lässt (Drag&Drop).\nBenutze dafür keine 3rd-Party-Bibliothek.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erzeuge weitere Div-Container, in die sich der zu verschiebende Container ablegen lässt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Sortieren", "fragen": [{ "frage": "Schreibe ein Programm, das alle DIV-Container auf einer Seite alphabetisch sortiert.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erweitere das Programm, dass es alle Elemente eines bestimmten Typs (div, tr, td, p, etc.) alphabetisch sortiert.\nDer Elementtyp soll über eine Selectbox ausgewählt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Die Selectbox soll automatisch mit allen zur Verfügung stehenden Elementtypen gefüllt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Erzeuge eine Tabelle mit einer Header-Zeile. Der Tabellen-Körper soll mit Zahlen gefüllt werden.\nWenn eine der Kopf-Felder angeklickt wird, dann soll die Tabelle nach der angeklickten Spalte sortiert werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Filtern", "fragen": [{ "frage": "Lege eine Tabelle und ein Texteingabefeld an.\nEs sollen nur die Tabellenzeilen dargestellt werden, in denen die Eingabe vorkommt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Lege ein Div-Element an und ein Texteingabefeld an.\nIm Div-Container sollen dann alle Vorkommen der Eingabe farbig markiert werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Rekursion", "fragen": [{ "frage": "Erstelle einen Raster von 16*16 Feldern.\nDiese sollen zufällig mit den ganzen Zahlen 1, 2 und 3 belegt werden.\nWenn eines der Felder angeklickt wird, dann sollen alle Felder mit gleichem Inhalt geleert werden, die direkt an diesem Feld liegen.\nDieses Leeren der Felder mit gleichem Inhalt soll rekursiv weiter geführt werden.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Gamesteuerung", "fragen": [{ "frage": "Lass in einem Canvas einen Kasten sich per Tastatursteuerung (W,A,S,D) lenken.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wie oben. Aber das zu steuernde Element soll eine Trägheit haben.\nD.h., es soll bei Druck auf eine Taste (W,A,S,D) in die entsprechende Richtung beschleunigen.\nWird die Taste losgelassen, läuft das Element weiter, bis es von der Reibung zum Stillstand gebracht wird. ", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Wie oben. Aber die Seitwärts-Tasten (A, D bzw Pfeile) sollen das Element drehen und eine Taste Deiner Wahl soll das Element in die Richtung bewegen, in die es zeigt.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Kollision", "fragen": [{ "frage": "Lass in einem Canvas einen Kasten sich bewegen (automatisch oder per Benutzereingabe).\nSobald der Player ein anderes Element berührt, soll eine entsprechende Meldung kommen.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }, { "frage": "Die Kollision soll pixelgenau sein.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }, { "name": "Römische Zahlen ", "fragen": [{ "frage": "Erstelle ein Programm, das Arabische Zahlen in Römische Zahlen umwandeln.", "typ": "praxis", "schwierigkeit": 0, "antworten": [""] }] }] }] };

